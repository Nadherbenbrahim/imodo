{"ast":null,"code":"import _toConsumableArray from\"/usr/work/smart_front_oussema/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/usr/work/smart_front_oussema/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{connect}from'react-redux';import{nextWizardStep,getExistingProject,getAllIntents,trainAgentPage,trainAgentPost}from'../../../redux/actions/wizardActions';import Swal from'sweetalert2/dist/sweetalert2.js';import ReactTooltip from'react-tooltip';import WizardIntentDetails from'./WizardIntentDetails';import{Row,Col,Spinner}from'react-bootstrap';export var WizardConfig=function WizardConfig(props){// Popup Config :\nvar swalWithBootstrapButtons=Swal.mixin({customClass:{confirmButton:'wizard-pages-active-btn py-2 px-3'},buttonsStyling:false});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedIntents=_useState2[0],setSelectedIntents=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),btnLoading=_useState4[0],setBtnLoading=_useState4[1];var checkIntent=function checkIntent(intent){var found=selectedIntents.findIndex(function(intenta){return intenta.name===intent;});if(found>-1){return true;}else{return false;}};var newIntent=function newIntent(intent){var found=selectedIntents.findIndex(function(intenta){return intenta.name===intent;});// if already clicked swal the popup\nif(found>-1){swalWithBootstrapButtons.fire({title:\"Intent: \\\"\".concat(intent,\"\\\" is already selected\"),confirmButtonText:'Okay'});}else{// Intent selected and create an array for the products to render it from the backend\nvar intentToPush={name:intent,products:[],status:'new'};console.log(\"Im pushing\",intentToPush);setSelectedIntents(function(selectedIntents){return[].concat(_toConsumableArray(selectedIntents),[intentToPush]);});}};var goToTrainAgent=function goToTrainAgent(){if(selectedIntents.length>0){setBtnLoading(true);if(props.wizardIntentType===\"generic\"){props.trainAgentPage(selectedIntents,props.wizardIdProject).then(function(){return props.nextWizardStep();});}else{props.trainAgentPost(selectedIntents,props.wizardIdProject).then(function(){return props.nextWizardStep();});}}else{swalWithBootstrapButtons.fire({title:\"You have to add at least one intent !\",confirmButtonText:'Okay'});}};useEffect(function(){props.getExistingProject(props.wizardIdProject).then(function(){props.getAllIntents(props.wizardIntentType);});},[]);useEffect(function(){if(props.wizardExistingProjectIntents){// Set selected Intent from the existing project directly :\nvar intentToPush={};var newIntents=_toConsumableArray(selectedIntents);props.wizardExistingProjectIntents.map(function(intent){console.log(\"Existing shit =>\",intent);intentToPush={name:intent.name,products:intent.answer,status:'old'};newIntents.push(intentToPush);setSelectedIntents(newIntents);});}// To Remove the listner\nreturn function(){};},[props.wizardExistingProjectIntents]);return/*#__PURE__*/React.createElement(Row,{className:\"mt-5\"},/*#__PURE__*/React.createElement(Col,{lg:1}),/*#__PURE__*/React.createElement(Col,{lg:9,className:\"wizard-pages-container mb-3\",style:{backgroundColor:'white'}},/*#__PURE__*/React.createElement(Row,{className:\"d-flex\"},/*#__PURE__*/React.createElement(Col,{lg:12,className:\"d-flex flex-column p-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex flex-column wizard-config-intents-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"mr-auto ml-2 p-2 wizard-config-intent-title\"},\"Select Intents\"),/*#__PURE__*/React.createElement(Row,{className:\"mb-3 mx-2 my-0 d-flex\"},props.wizardIntents&&props.wizardIntents.map(function(intent,index){return/*#__PURE__*/React.createElement(Col,{key:index,lg:1,onClick:function onClick(){return newIntent(intent);},className:checkIntent(intent)?\"d-flex wizard-config-intent-box-active py-1 mb-2 mr-1\":\"d-flex wizard-config-intent-box py-1 mb-2 mr-1\"},intent.length>6?/*#__PURE__*/React.createElement(\"p\",{\"data-for\":\"intentTip\",\"data-tip\":intent,className:\"m-auto wizard-config-intent-name\"},intent.substring(0,5),\"..\"):/*#__PURE__*/React.createElement(\"p\",{className:\"m-auto wizard-config-intent-name\"},intent),/*#__PURE__*/React.createElement(ReactTooltip,{id:\"intentTip\",textColor:\"#fff\",backgroundColor:\"#E5007D\"}));}))))),/*#__PURE__*/React.createElement(Row,{className:\"d-flex mt-1\"},selectedIntents&&selectedIntents.map(function(intent,index){return/*#__PURE__*/React.createElement(WizardIntentDetails,{indexOfIntent:index,intent:intent,wizardIdProject:props.wizardIdProject,setIntents:setSelectedIntents,selectedIntents:selectedIntents,isExistingProject:props.wizardExistingProjectIntents?props.wizardExistingProjectIntents:false,intentStatus:intent.status});})),/*#__PURE__*/React.createElement(Col,{lg:12},/*#__PURE__*/React.createElement(Row,{className:\"mb-3\"},/*#__PURE__*/React.createElement(Col,{lg:6}),/*#__PURE__*/React.createElement(Col,{lg:6},/*#__PURE__*/React.createElement(Row,{className:\"d-flex\"},/*#__PURE__*/React.createElement(\"div\",{className:\"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\"},\"Save Draft\"),/*#__PURE__*/React.createElement(\"div\",{className:\"wizard-pages-active-btn py-2 px-4 mr-3\",onClick:function onClick(){return goToTrainAgent();}},btnLoading?/*#__PURE__*/React.createElement(Spinner,{size:\"sm\",animation:\"border\",variant:\"light\"}):\"Next\")))))),/*#__PURE__*/React.createElement(Col,{lg:2}));};var mapStateToProps=function mapStateToProps(state){return{wizardStep:state.wizardR.wizardStep,wizardIntentType:state.wizardR.wizardIntentType,wizardIdProject:state.wizardR.wizardIdProject,wizardExistingProject:state.wizardR.wizardExistingProject,wizardExistingProjectIntents:state.wizardR.wizardExistingProjectIntents,wizardIntents:state.wizardR.wizardIntents,wizardSelectedPage:state.wizardR.wizardSelectedPage,wizardSelectedPost:state.wizardR.wizardSelectedPost};};export default connect(mapStateToProps,{nextWizardStep:nextWizardStep,getExistingProject:getExistingProject,getAllIntents:getAllIntents,trainAgentPage:trainAgentPage,trainAgentPost:trainAgentPost})(WizardConfig);","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js"],"names":["React","useEffect","useState","connect","nextWizardStep","getExistingProject","getAllIntents","trainAgentPage","trainAgentPost","Swal","ReactTooltip","WizardIntentDetails","Row","Col","Spinner","WizardConfig","props","swalWithBootstrapButtons","mixin","customClass","confirmButton","buttonsStyling","selectedIntents","setSelectedIntents","btnLoading","setBtnLoading","checkIntent","intent","found","findIndex","intenta","name","newIntent","fire","title","confirmButtonText","intentToPush","products","status","console","log","goToTrainAgent","length","wizardIntentType","wizardIdProject","then","wizardExistingProjectIntents","newIntents","map","answer","push","backgroundColor","wizardIntents","index","substring","mapStateToProps","state","wizardStep","wizardR","wizardExistingProject","wizardSelectedPage","wizardSelectedPost"],"mappings":"gTAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,cAAT,CAAwBC,kBAAxB,CAA4CC,aAA5C,CAA2DC,cAA3D,CAA2EC,cAA3E,KAAiG,sCAAjG,CACA,MAAOC,CAAAA,IAAP,KAAiB,iCAAjB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAEA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CAEA,OACIC,GADJ,CAEIC,GAFJ,CAGIC,OAHJ,KAIO,iBAJP,CAMA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAEnC;AACA,GAAMC,CAAAA,wBAAwB,CAAGR,IAAI,CAACS,KAAL,CAAW,CACxCC,WAAW,CAAE,CACXC,aAAa,CAAE,mCADJ,CAD2B,CAIxCC,cAAc,CAAE,KAJwB,CAAX,CAAjC,CAHmC,cAUWnB,QAAQ,CAAC,EAAD,CAVnB,wCAU5BoB,eAV4B,eAUXC,kBAVW,8BAWCrB,QAAQ,CAAC,KAAD,CAXT,yCAW5BsB,UAX4B,eAWhBC,aAXgB,eAcnC,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAAY,CAC5B,GAAIC,CAAAA,KAAK,CAAGN,eAAe,CAACO,SAAhB,CAA0B,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,IAAR,GAAiBJ,MAA9B,EAA1B,CAAZ,CAEA,GAAGC,KAAK,CAAG,CAAC,CAAZ,CAAe,CACZ,MAAO,KAAP,CACF,CAFD,IAEO,CACH,MAAO,MAAP,CACH,CACJ,CARD,CAUA,GAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACL,MAAD,CAAY,CAC1B,GAAIC,CAAAA,KAAK,CAAGN,eAAe,CAACO,SAAhB,CAA0B,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,IAAR,GAAiBJ,MAA9B,EAA1B,CAAZ,CAEA;AACA,GAAGC,KAAK,CAAG,CAAC,CAAZ,CAAe,CACXX,wBAAwB,CAACgB,IAAzB,CAA8B,CAAEC,KAAK,qBAAcP,MAAd,0BAAP,CAAmDQ,iBAAiB,CAAE,MAAtE,CAA9B,EACH,CAFD,IAEO,CACH;AACA,GAAIC,CAAAA,YAAY,CAAG,CACfL,IAAI,CAAEJ,MADS,CAEfU,QAAQ,CAAE,EAFK,CAGfC,MAAM,CAAE,KAHO,CAAnB,CAMAC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA0BJ,YAA1B,EAEAb,kBAAkB,CAAC,SAAAD,eAAe,qCAAQA,eAAR,GAAyBc,YAAzB,IAAhB,CAAlB,CACH,CACJ,CAlBD,CAoBA,GAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzB,GAAGnB,eAAe,CAACoB,MAAhB,CAAyB,CAA5B,CAA+B,CAC3BjB,aAAa,CAAC,IAAD,CAAb,CAEA,GAAGT,KAAK,CAAC2B,gBAAN,GAA2B,SAA9B,CAAyC,CACrC3B,KAAK,CAACT,cAAN,CAAqBe,eAArB,CAAqCN,KAAK,CAAC4B,eAA3C,EACCC,IADD,CACM,iBAAM7B,CAAAA,KAAK,CAACZ,cAAN,EAAN,EADN,EAEH,CAHD,IAGO,CACHY,KAAK,CAACR,cAAN,CAAqBc,eAArB,CAAqCN,KAAK,CAAC4B,eAA3C,EACCC,IADD,CACM,iBAAM7B,CAAAA,KAAK,CAACZ,cAAN,EAAN,EADN,EAEH,CACJ,CAVD,IAUO,CACHa,wBAAwB,CAACgB,IAAzB,CAA8B,CAAEC,KAAK,wCAAP,CAAkDC,iBAAiB,CAAE,MAArE,CAA9B,EACH,CACJ,CAdD,CAgBAlC,SAAS,CAAC,UAAM,CACZe,KAAK,CAACX,kBAAN,CAAyBW,KAAK,CAAC4B,eAA/B,EACCC,IADD,CACM,UAAM,CACR7B,KAAK,CAACV,aAAN,CAAoBU,KAAK,CAAC2B,gBAA1B,EACH,CAHD,EAIH,CALQ,CAKP,EALO,CAAT,CAOA1C,SAAS,CAAC,UAAM,CACZ,GAAGe,KAAK,CAAC8B,4BAAT,CAAuC,CACnC;AACA,GAAIV,CAAAA,YAAY,CAAG,EAAnB,CACA,GAAIW,CAAAA,UAAU,oBAAOzB,eAAP,CAAd,CAEAN,KAAK,CAAC8B,4BAAN,CAAmCE,GAAnC,CAAuC,SAAArB,MAAM,CAAI,CAC7CY,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAgCb,MAAhC,EAEAS,YAAY,CAAG,CACXL,IAAI,CAAEJ,MAAM,CAACI,IADF,CAEXM,QAAQ,CAAEV,MAAM,CAACsB,MAFN,CAGXX,MAAM,CAAE,KAHG,CAAf,CAKAS,UAAU,CAACG,IAAX,CAAgBd,YAAhB,EACAb,kBAAkB,CAACwB,UAAD,CAAlB,CACH,CAVD,EAWH,CACD;AACA,MAAO,WAAM,CAEZ,CAFD,CAGH,CAtBQ,CAsBP,CAAC/B,KAAK,CAAC8B,4BAAP,CAtBO,CAAT,CAyBA,mBACI,oBAAC,GAAD,EAAK,SAAS,CAAC,MAAf,eACI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,EADJ,cAGI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,CAAY,SAAS,CAAC,6BAAtB,CAAoD,KAAK,CAAE,CAACK,eAAe,CAAE,OAAlB,CAA3D,eAGI,oBAAC,GAAD,EAAK,SAAS,CAAC,QAAf,eACI,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,CAAa,SAAS,CAAC,wBAAvB,eACI,2BAAK,SAAS,CAAC,oDAAf,eACI,yBAAG,SAAS,CAAC,6CAAb,mBADJ,cAGI,oBAAC,GAAD,EAAK,SAAS,CAAC,uBAAf,EAEInC,KAAK,CAACoC,aAAN,EAEApC,KAAK,CAACoC,aAAN,CAAoBJ,GAApB,CAAwB,SAACrB,MAAD,CAAS0B,KAAT,qBACpB,oBAAC,GAAD,EAAK,GAAG,CAAEA,KAAV,CAAiB,EAAE,CAAE,CAArB,CAAwB,OAAO,CAAE,yBAAMrB,CAAAA,SAAS,CAACL,MAAD,CAAf,EAAjC,CAA0D,SAAS,CAAED,WAAW,CAACC,MAAD,CAAX,CAAsB,uDAAtB,CAAgF,gDAArJ,EACKA,MAAM,CAACe,MAAP,CAAgB,CAAhB,cAED,yBAAG,WAAS,WAAZ,CAAwB,WAAUf,MAAlC,CAA0C,SAAS,CAAC,kCAApD,EAAwFA,MAAM,CAAC2B,SAAP,CAAiB,CAAjB,CAAmB,CAAnB,CAAxF,MAFC,cAID,yBAAG,SAAS,CAAC,kCAAb,EAAiD3B,MAAjD,CALJ,cAOI,oBAAC,YAAD,EAAc,EAAE,CAAC,WAAjB,CAA6B,SAAS,CAAC,MAAvC,CAA8C,eAAe,CAAC,SAA9D,EAPJ,CADoB,EAAxB,CAJJ,CAHJ,CADJ,CADJ,CAHJ,cA4BI,oBAAC,GAAD,EAAK,SAAS,CAAC,aAAf,EACKL,eAAe,EACZA,eAAe,CAAC0B,GAAhB,CAAoB,SAACrB,MAAD,CAAQ0B,KAAR,qBACpB,oBAAC,mBAAD,EACI,aAAa,CAAEA,KADnB,CAEI,MAAM,CAAE1B,MAFZ,CAGI,eAAe,CAAEX,KAAK,CAAC4B,eAH3B,CAII,UAAU,CAAErB,kBAJhB,CAKI,eAAe,CAAED,eALrB,CAMI,iBAAiB,CAAEN,KAAK,CAAC8B,4BAAN,CAAqC9B,KAAK,CAAC8B,4BAA3C,CAA0E,KANjG,CAOI,YAAY,CAAEnB,MAAM,CAACW,MAPzB,EADoB,EAApB,CAFR,CA5BJ,cA4CI,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eACI,oBAAC,GAAD,EAAK,SAAS,CAAC,MAAf,eACI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,EADJ,cASI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACI,oBAAC,GAAD,EAAK,SAAS,CAAC,QAAf,eACI,2BAAK,SAAS,CAAE,kDAAhB,eADJ,cAGI,2BAAK,SAAS,CAAE,wCAAhB,CAA0D,OAAO,CAAE,yBAAMG,CAAAA,cAAc,EAApB,EAAnE,EAEQjB,UAAU,cAEL,oBAAC,OAAD,EAAS,IAAI,CAAC,IAAd,CAAmB,SAAS,CAAC,QAA7B,CAAsC,OAAO,CAAC,OAA9C,EAFK,CAIN,MANZ,CAHJ,CADJ,CATJ,CADJ,CA5CJ,CAHJ,cA6EI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,EA7EJ,CADJ,CAiFH,CA7KM,CA+KP,GAAM+B,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAAY,CAChCC,UAAU,CAAED,KAAK,CAACE,OAAN,CAAcD,UADM,CAEhCd,gBAAgB,CAAEa,KAAK,CAACE,OAAN,CAAcf,gBAFA,CAGhCC,eAAe,CAAEY,KAAK,CAACE,OAAN,CAAcd,eAHC,CAIhCe,qBAAqB,CAAEH,KAAK,CAACE,OAAN,CAAcC,qBAJL,CAKhCb,4BAA4B,CAAEU,KAAK,CAACE,OAAN,CAAcZ,4BALZ,CAMhCM,aAAa,CAAEI,KAAK,CAACE,OAAN,CAAcN,aANG,CAOhCQ,kBAAkB,CAAEJ,KAAK,CAACE,OAAN,CAAcE,kBAPF,CAQhCC,kBAAkB,CAAEL,KAAK,CAACE,OAAN,CAAcG,kBARF,CAAZ,EAAxB,CAWA,cAAe1D,CAAAA,OAAO,CAACoD,eAAD,CAAkB,CAACnD,cAAc,CAAdA,cAAD,CAAgBC,kBAAkB,CAAlBA,kBAAhB,CAAoCC,aAAa,CAAbA,aAApC,CAAmDC,cAAc,CAAdA,cAAnD,CAAkEC,cAAc,CAAdA,cAAlE,CAAlB,CAAP,CAA6GO,YAA7G,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { nextWizardStep,getExistingProject, getAllIntents, trainAgentPage, trainAgentPost } from '../../../redux/actions/wizardActions';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport WizardIntentDetails from './WizardIntentDetails';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Spinner\r\n} from 'react-bootstrap';\r\n\r\nexport const WizardConfig = (props) => {\r\n\r\n    // Popup Config :\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n        customClass: {\r\n          confirmButton: 'wizard-pages-active-btn py-2 px-3',\r\n        },\r\n        buttonsStyling: false\r\n    });\r\n\r\n    const [selectedIntents, setSelectedIntents] = useState([]);\r\n    const [btnLoading, setBtnLoading] = useState(false);\r\n\r\n\r\n    const checkIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n\r\n        if(found > -1) {\r\n           return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const newIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n        \r\n        // if already clicked swal the popup\r\n        if(found > -1) {    \r\n            swalWithBootstrapButtons.fire({ title: `Intent: \"${intent}\" is already selected`,confirmButtonText: 'Okay' });\r\n        } else {\r\n            // Intent selected and create an array for the products to render it from the backend\r\n            let intentToPush = {\r\n                name: intent,\r\n                products: [],\r\n                status: 'new',\r\n            };\r\n\r\n            console.log(\"Im pushing\", intentToPush)\r\n\r\n            setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush ]);\r\n        }\r\n    };\r\n\r\n    const goToTrainAgent = () => {\r\n        if(selectedIntents.length > 0) {\r\n            setBtnLoading(true);\r\n\r\n            if(props.wizardIntentType === \"generic\") {\r\n                props.trainAgentPage(selectedIntents,props.wizardIdProject)\r\n                .then(() => props.nextWizardStep());\r\n            } else {\r\n                props.trainAgentPost(selectedIntents,props.wizardIdProject)\r\n                .then(() => props.nextWizardStep());\r\n            }\r\n        } else {\r\n            swalWithBootstrapButtons.fire({ title: `You have to add at least one intent !`, confirmButtonText: 'Okay' });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.getExistingProject(props.wizardIdProject)\r\n        .then(() => {\r\n            props.getAllIntents(props.wizardIntentType)\r\n        });\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(props.wizardExistingProjectIntents) {\r\n            // Set selected Intent from the existing project directly :\r\n            let intentToPush = {};\r\n            let newIntents = [...selectedIntents];\r\n\r\n            props.wizardExistingProjectIntents.map(intent => {\r\n                console.log(\"Existing shit =>\", intent);\r\n\r\n                intentToPush = {\r\n                    name: intent.name,\r\n                    products: intent.answer,\r\n                    status: 'old',\r\n                };\r\n                newIntents.push(intentToPush);\r\n                setSelectedIntents(newIntents);\r\n            });\r\n        }\r\n        // To Remove the listner\r\n        return () => {\r\n\r\n        };\r\n    },[props.wizardExistingProjectIntents]);\r\n\r\n\r\n    return (\r\n        <Row className=\"mt-5\">  \r\n            <Col lg={1} />\r\n    \r\n            <Col lg={9} className=\"wizard-pages-container mb-3\" style={{backgroundColor: 'white'}}>\r\n                \r\n                {/* INTENTS */}\r\n                <Row className=\"d-flex\">\r\n                    <Col lg={12} className=\"d-flex flex-column p-3\">\r\n                        <div className=\"d-flex flex-column wizard-config-intents-container\">\r\n                            <p className=\"mr-auto ml-2 p-2 wizard-config-intent-title\">Select Intents</p>\r\n                            \r\n                            <Row className=\"mb-3 mx-2 my-0 d-flex\">\r\n                                {\r\n                                props.wizardIntents \r\n                                &&\r\n                                props.wizardIntents.map((intent, index) => (\r\n                                    <Col key={index} lg={1} onClick={() => newIntent(intent)} className={checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 mb-2 mr-1\"}>\r\n                                        {intent.length > 6\r\n                                        ?\r\n                                        <p data-for='intentTip' data-tip={intent} className=\"m-auto wizard-config-intent-name\">{intent.substring(0,5)}..</p>\r\n                                        :\r\n                                        <p className=\"m-auto wizard-config-intent-name\">{intent}</p>\r\n                                        }\r\n                                        <ReactTooltip id='intentTip' textColor='#fff' backgroundColor='#E5007D' />\r\n                                    </Col>\r\n                                ))}\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row className=\"d-flex mt-1\">  \r\n                    {selectedIntents &&\r\n                        selectedIntents.map((intent,index) => \r\n                        <WizardIntentDetails \r\n                            indexOfIntent={index} \r\n                            intent={intent} \r\n                            wizardIdProject={props.wizardIdProject} \r\n                            setIntents={setSelectedIntents} \r\n                            selectedIntents={selectedIntents} \r\n                            isExistingProject={props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false} \r\n                            intentStatus={intent.status}\r\n                        />\r\n                    )}\r\n                </Row>\r\n             \r\n                {/* BTNS */}\r\n                <Col lg={12}>\r\n                    <Row className=\"mb-3\">\r\n                        <Col lg={6}>\r\n                            {/* <Row className=\"d-flex\">\r\n                                <div className=\"wizard-pages-inactive-btn d-flex py-2 px-4 ml-3 mr-auto my-auto\" onClick={() => props.prevWizardStep()}>\r\n                                    Back\r\n                                </div>\r\n                            </Row> */}\r\n                        </Col>\r\n\r\n                        <Col lg={6}>\r\n                            <Row className=\"d-flex\">\r\n                                <div className={\"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\"}>Save Draft</div>\r\n                                \r\n                                <div className={\"wizard-pages-active-btn py-2 px-4 mr-3\"} onClick={() => goToTrainAgent()}>\r\n                                    {\r\n                                        btnLoading\r\n                                        ?\r\n                                            (<Spinner size=\"sm\" animation=\"border\" variant=\"light\" />)\r\n                                        :\r\n                                            \"Next\"\r\n                                    }\r\n                                </div>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n            </Col>\r\n    \r\n            <Col lg={2} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    wizardStep: state.wizardR.wizardStep,\r\n    wizardIntentType: state.wizardR.wizardIntentType,\r\n    wizardIdProject: state.wizardR.wizardIdProject,\r\n    wizardExistingProject: state.wizardR.wizardExistingProject,\r\n    wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\r\n    wizardIntents: state.wizardR.wizardIntents,\r\n    wizardSelectedPage: state.wizardR.wizardSelectedPage,\r\n    wizardSelectedPost: state.wizardR.wizardSelectedPost,\r\n})\r\n\r\nexport default connect(mapStateToProps, {nextWizardStep,getExistingProject, getAllIntents, trainAgentPage,trainAgentPost })(WizardConfig)\r\n"]},"metadata":{},"sourceType":"module"}