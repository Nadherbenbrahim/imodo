{"ast":null,"code":"var _jsxFileName = \"/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { nextWizardStep, getExistingProject, getAllIntents, trainAgentPage, trainAgentPost, step3Done } from '../../../redux/actions/wizardActions';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport ReactTooltip from 'react-tooltip';\nimport WizardIntentDetails from './WizardIntentDetails';\nimport { Row, Col, Spinner } from 'react-bootstrap';\nexport const WizardConfig = props => {\n  // Popup Config :\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'wizard-pages-active-btn py-2 px-3'\n    },\n    buttonsStyling: false\n  });\n  const [selectedIntents, setSelectedIntents] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n\n  const checkIntent = intent => {\n    let found = selectedIntents.findIndex(intenta => intenta.name === intent);\n\n    if (found > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const newIntent = intent => {\n    let found = selectedIntents.findIndex(intenta => intenta.name === intent); // if already clicked swal the popup\n\n    if (found > -1) {\n      swalWithBootstrapButtons.fire({\n        title: `Intent: \"${intent}\" is already selected`,\n        confirmButtonText: 'Okay'\n      });\n    } else {\n      // Intent selected and create an array for the products to render it from the backend\n      let intentToPush = {\n        name: intent,\n        products: [],\n        status: 'new'\n      };\n      console.log(\"Im pushing\", intentToPush);\n      setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush]);\n    }\n  };\n\n  const goToTrainAgent = () => {\n    if (selectedIntents.length > 0) {\n      setBtnLoading(true);\n\n      if (props.wizardIntentType === \"generic\") {\n        props.trainAgentPage(selectedIntents, props.wizardIdProject).then(() => props.step3Done());\n      } else {\n        props.trainAgentPost(selectedIntents, props.wizardIdProject).then(() => props.step3Done());\n      }\n    } else {\n      swalWithBootstrapButtons.fire({\n        title: `You have to add at least one intent !`,\n        confirmButtonText: 'Okay'\n      });\n    }\n  };\n\n  useEffect(() => {\n    props.getExistingProject(props.wizardIdProject).then(() => {\n      props.getAllIntents(props.wizardIntentType);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(\"Heeyy\", props.wizardConfigDone);\n\n    if (props.wizardExistingProjectIntents && !props.wizardConfigDone) {\n      console.log(\"Heeyy Entered\"); // Set selected Intent from the existing project directly :\n\n      let intentToPush = {};\n      let newIntents = [...selectedIntents];\n      props.wizardExistingProjectIntents.map(intent => {\n        // console.log(\"Existing shit =>\", intent);\n        intentToPush = {\n          name: intent.name,\n          products: intent.answer,\n          status: 'old'\n        };\n        newIntents.push(intentToPush);\n        setSelectedIntents(newIntents);\n      });\n    } // To Remove the listner\n\n\n    return () => {};\n  }, [props.wizardExistingProjectIntents]);\n  return /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 9,\n    className: \"wizard-pages-container mb-3\",\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"d-flex flex-column p-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column wizard-config-intents-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mr-auto ml-2 p-2 wizard-config-intent-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }\n  }, \"Select Intents\"), /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-3 mx-2 my-0 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  }, props.wizardIntents && props.wizardIntents.map((intent, index) => /*#__PURE__*/React.createElement(Col, {\n    key: index,\n    lg: 1,\n    onClick: () => newIntent(intent),\n    className: checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 mb-2 mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 37\n    }\n  }, intent.length > 6 ? /*#__PURE__*/React.createElement(\"p\", {\n    \"data-for\": \"intentTip\",\n    \"data-tip\": intent,\n    className: \"m-auto wizard-config-intent-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 41\n    }\n  }, intent.substring(0, 5), \"..\") : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"m-auto wizard-config-intent-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  }, intent), /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"intentTip\",\n    textColor: \"#fff\",\n    backgroundColor: \"#E5007D\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 41\n    }\n  }))))))), /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, selectedIntents && props.wizardExistingProjectIntents && selectedIntents.map((intent, index) => /*#__PURE__*/React.createElement(WizardIntentDetails, {\n    indexOfIntent: index,\n    intent: intent,\n    wizardIdProject: props.wizardIdProject,\n    setIntents: setSelectedIntents,\n    selectedIntents: selectedIntents,\n    isExistingProject: props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false,\n    intentStatus: intent.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 33\n    }\n  }, \"Save Draft\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-active-btn py-2 px-4 mr-3\",\n    onClick: () => goToTrainAgent(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 33\n    }\n  }, btnLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    size: \"sm\",\n    animation: \"border\",\n    variant: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 46\n    }\n  }) : \"Next\")))))), /*#__PURE__*/React.createElement(Col, {\n    lg: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  wizardStep: state.wizardR.wizardStep,\n  wizardConfigDone: state.wizardR.wizardConfigDone,\n  wizardIntentType: state.wizardR.wizardIntentType,\n  wizardIdProject: state.wizardR.wizardIdProject,\n  wizardExistingProject: state.wizardR.wizardExistingProject,\n  wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\n  wizardIntents: state.wizardR.wizardIntents,\n  wizardSelectedPage: state.wizardR.wizardSelectedPage,\n  wizardSelectedPost: state.wizardR.wizardSelectedPost\n});\n\nexport default connect(mapStateToProps, {\n  nextWizardStep,\n  getExistingProject,\n  getAllIntents,\n  trainAgentPage,\n  trainAgentPost,\n  step3Done\n})(WizardConfig);","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js"],"names":["React","useEffect","useState","connect","nextWizardStep","getExistingProject","getAllIntents","trainAgentPage","trainAgentPost","step3Done","Swal","ReactTooltip","WizardIntentDetails","Row","Col","Spinner","WizardConfig","props","swalWithBootstrapButtons","mixin","customClass","confirmButton","buttonsStyling","selectedIntents","setSelectedIntents","btnLoading","setBtnLoading","checkIntent","intent","found","findIndex","intenta","name","newIntent","fire","title","confirmButtonText","intentToPush","products","status","console","log","goToTrainAgent","length","wizardIntentType","wizardIdProject","then","wizardConfigDone","wizardExistingProjectIntents","newIntents","map","answer","push","backgroundColor","wizardIntents","index","substring","mapStateToProps","state","wizardStep","wizardR","wizardExistingProject","wizardSelectedPage","wizardSelectedPost"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { nextWizardStep,getExistingProject, getAllIntents, trainAgentPage, trainAgentPost, step3Done } from '../../../redux/actions/wizardActions';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport WizardIntentDetails from './WizardIntentDetails';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Spinner\r\n} from 'react-bootstrap';\r\n\r\nexport const WizardConfig = (props) => {\r\n\r\n    // Popup Config :\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n        customClass: {\r\n          confirmButton: 'wizard-pages-active-btn py-2 px-3',\r\n        },\r\n        buttonsStyling: false\r\n    });\r\n\r\n    const [selectedIntents, setSelectedIntents] = useState([]);\r\n    const [btnLoading, setBtnLoading] = useState(false);\r\n\r\n    const checkIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n\r\n        if(found > -1) {\r\n           return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const newIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n        \r\n        // if already clicked swal the popup\r\n        if(found > -1) {    \r\n            swalWithBootstrapButtons.fire({ title: `Intent: \"${intent}\" is already selected`,confirmButtonText: 'Okay' });\r\n        } else {\r\n            // Intent selected and create an array for the products to render it from the backend\r\n            let intentToPush = {\r\n                name: intent,\r\n                products: [],\r\n                status: 'new',\r\n            };\r\n\r\n            console.log(\"Im pushing\", intentToPush)\r\n\r\n            setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush ]);\r\n        }\r\n    };\r\n\r\n    const goToTrainAgent = () => {\r\n        if(selectedIntents.length > 0) {\r\n            setBtnLoading(true);\r\n\r\n            if(props.wizardIntentType === \"generic\") {\r\n                props.trainAgentPage(selectedIntents,props.wizardIdProject)\r\n                .then(() => props.step3Done() );\r\n            } else {\r\n                props.trainAgentPost(selectedIntents,props.wizardIdProject)\r\n                .then(() => props.step3Done() );\r\n            }\r\n        } else {\r\n            swalWithBootstrapButtons.fire({ title: `You have to add at least one intent !`, confirmButtonText: 'Okay' });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n            props.getExistingProject(props.wizardIdProject)\r\n            .then(() => {\r\n                props.getAllIntents(props.wizardIntentType)\r\n            });\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"Heeyy\", props.wizardConfigDone)\r\n        if(props.wizardExistingProjectIntents && !props.wizardConfigDone) {\r\n            console.log(\"Heeyy Entered\")\r\n            // Set selected Intent from the existing project directly :\r\n            let intentToPush = {};\r\n            let newIntents = [...selectedIntents];\r\n\r\n            props.wizardExistingProjectIntents.map(intent => {\r\n                // console.log(\"Existing shit =>\", intent);\r\n                intentToPush = {\r\n                    name: intent.name,\r\n                    products: intent.answer,\r\n                    status: 'old',\r\n                };\r\n                newIntents.push(intentToPush);\r\n                setSelectedIntents(newIntents);\r\n            });\r\n        }\r\n        // To Remove the listner\r\n        return () => {\r\n\r\n        };\r\n    },[props.wizardExistingProjectIntents]);\r\n\r\n    return (\r\n        <Row className=\"mt-5\">  \r\n            <Col lg={1} />\r\n    \r\n            <Col lg={9} className=\"wizard-pages-container mb-3\" style={{backgroundColor: 'white'}}>\r\n                \r\n                {/* INTENTS */}\r\n                <Row className=\"d-flex\">\r\n                    <Col lg={12} className=\"d-flex flex-column p-3\">\r\n                        <div className=\"d-flex flex-column wizard-config-intents-container\">\r\n                            <p className=\"mr-auto ml-2 p-2 wizard-config-intent-title\">Select Intents</p>\r\n                            \r\n                            <Row className=\"mb-3 mx-2 my-0 d-flex\">\r\n                                {\r\n                                props.wizardIntents \r\n                                &&\r\n                                props.wizardIntents.map((intent, index) => (\r\n                                    <Col key={index} lg={1} onClick={() => newIntent(intent)} className={checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 mb-2 mr-1\"}>\r\n                                        {intent.length > 6\r\n                                        ?\r\n                                        <p data-for='intentTip' data-tip={intent} className=\"m-auto wizard-config-intent-name\">{intent.substring(0,5)}..</p>\r\n                                        :\r\n                                        <p className=\"m-auto wizard-config-intent-name\">{intent}</p>\r\n                                        }\r\n                                        <ReactTooltip id='intentTip' textColor='#fff' backgroundColor='#E5007D' />\r\n                                    </Col>\r\n                                ))}\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row className=\"d-flex mt-1\">  \r\n                    {selectedIntents && props.wizardExistingProjectIntents &&\r\n                        selectedIntents.map((intent,index) => \r\n                        <WizardIntentDetails \r\n                            indexOfIntent={index} \r\n                            intent={intent} \r\n                            wizardIdProject={props.wizardIdProject} \r\n                            setIntents={setSelectedIntents} \r\n                            selectedIntents={selectedIntents} \r\n                            isExistingProject={props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false} \r\n                            intentStatus={intent.status}\r\n                        />\r\n                    )}\r\n                </Row>\r\n             \r\n                {/* BTNS */}\r\n                <Col lg={12}>\r\n                    <Row className=\"mb-3\">\r\n                        <Col lg={6}>\r\n                            {/* <Row className=\"d-flex\">\r\n                                <div className=\"wizard-pages-inactive-btn d-flex py-2 px-4 ml-3 mr-auto my-auto\" onClick={() => props.prevWizardStep()}>\r\n                                    Back\r\n                                </div>\r\n                            </Row> */}\r\n                        </Col>\r\n\r\n                        <Col lg={6}>\r\n                            <Row className=\"d-flex\">\r\n                                <div className={\"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\"}>Save Draft</div>\r\n                                \r\n                                <div className={\"wizard-pages-active-btn py-2 px-4 mr-3\"} onClick={() => goToTrainAgent()}>\r\n                                    {\r\n                                        btnLoading\r\n                                        ?\r\n                                            (<Spinner size=\"sm\" animation=\"border\" variant=\"light\" />)\r\n                                        :\r\n                                            \"Next\"\r\n                                    }\r\n                                </div>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n            </Col>\r\n    \r\n            <Col lg={2} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    wizardStep: state.wizardR.wizardStep,\r\n    wizardConfigDone : state.wizardR.wizardConfigDone,\r\n    wizardIntentType: state.wizardR.wizardIntentType,\r\n    wizardIdProject: state.wizardR.wizardIdProject,\r\n    wizardExistingProject: state.wizardR.wizardExistingProject,\r\n    wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\r\n    wizardIntents: state.wizardR.wizardIntents,\r\n    wizardSelectedPage: state.wizardR.wizardSelectedPage,\r\n    wizardSelectedPost: state.wizardR.wizardSelectedPost,\r\n})\r\n\r\nexport default connect(mapStateToProps, {nextWizardStep,getExistingProject, getAllIntents, trainAgentPage,trainAgentPost, step3Done })(WizardConfig)\r\n"]},"metadata":{},"sourceType":"module"}