{"ast":null,"code":"var _jsxFileName = \"/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { nextWizardStep, getExistingProject, getAllIntents, trainAgentPage, trainAgentPost, resetStep3Wizard, nextSpecificWizardStep, resetWizardPostSelected, resetWizardPageSelected } from '../../../redux/actions/wizardActions';\nimport Swal from 'sweetalert2/dist/sweetalert2.js'; // import ReactTooltip from 'react-tooltip';\n\nimport WizardIntentDetails from './WizardIntentDetails';\nimport { Row, Col, Spinner } from 'react-bootstrap';\nimport { useLocation } from 'react-router-dom';\nexport const WizardConfig = props => {\n  // Popup Config :\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'wizard-pages-active-btn py-2 px-3'\n    },\n    buttonsStyling: false\n  });\n  const [selectedIntents, setSelectedIntents] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n  let location = useLocation();\n\n  const checkIntent = intent => {\n    let found = selectedIntents.findIndex(intenta => intenta.name === intent);\n\n    if (found > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const newIntent = intent => {\n    let found = selectedIntents.findIndex(intenta => intenta.name === intent); // if already clicked swal the popup\n\n    if (found > -1) {\n      swalWithBootstrapButtons.fire({\n        title: `Intent: \"${intent}\" is already selected`,\n        confirmButtonText: 'Okay'\n      });\n    } else {\n      // Intent selected and create an array for the products to render it from the backend\n      let intentToPush = {\n        name: intent,\n        products: [],\n        status: 'new'\n      };\n      console.log(\"Im pushing\", intentToPush);\n      setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush]);\n    }\n  };\n\n  const goToTrainAgent = () => {\n    if (selectedIntents.length > 0) {\n      setBtnLoading(true);\n\n      if (props.wizardIntentType === \"generic\") {\n        props.trainAgentPage(selectedIntents, props.wizardIdProject).then(() => props.nextWizardStep()).then(() => props.resetStep3Wizard());\n      } else {\n        props.trainAgentPost(selectedIntents, props.wizardIdProject).then(() => props.nextWizardStep()).then(() => props.resetStep3Wizard());\n      }\n    } else {\n      swalWithBootstrapButtons.fire({\n        title: `You have to add at least one intent !`,\n        confirmButtonText: 'Okay'\n      });\n    }\n  };\n\n  const handleBackFromStep3To2 = () => {\n    props.resetStep3Wizard();\n    console.log(\"Lets see location first =>\", location);\n\n    if (props.wizardIntentType === \"generic\") {\n      props.resetWizardPageSelected();\n      props.nextSpecificWizardStep(0);\n    } else {\n      props.resetWizardPostSelected();\n      props.nextSpecificWizardStep(1);\n    }\n  };\n\n  useEffect(() => {\n    props.getExistingProject(props.wizardIdProject).then(() => {\n      props.getAllIntents(props.wizardIntentType);\n    }).then(() => {\n      if (props.wizardExistingProjectIntents) {\n        // Set selected Intent from the existing project directly :\n        let intentToPush = {}; // let newIntents = [...selectedIntents];\n\n        let newIntents = [];\n        props.wizardExistingProjectIntents.map(intent => {\n          // console.log(\"Existing shit =>\", intent);\n          intentToPush = {\n            name: intent.name,\n            products: intent.answer,\n            status: 'old'\n          };\n          newIntents.push(intentToPush);\n        }); // console.log(\"Final intent =>\", newIntents);\n\n        setSelectedIntents(newIntents);\n      }\n    });\n  }, []); // useEffect(() => {\n  //     if(props.wizardExistingProjectIntents) {\n  //         // Set selected Intent from the existing project directly :\n  //         let intentToPush = {};\n  //         // let newIntents = [...selectedIntents];\n  //         let newIntents = [];\n  //         props.wizardExistingProjectIntents.map(intent => {\n  //             // console.log(\"Existing shit =>\", intent);\n  //             intentToPush = {\n  //                 name: intent.name,\n  //                 products: intent.answer,\n  //                 status: 'old',\n  //             };\n  //             newIntents.push(intentToPush);\n  //         });\n  //         // console.log(\"Final intent =>\", newIntents);\n  //         setSelectedIntents(newIntents);\n  //     }\n  //     // To Remove the listner\n  //     return () => {};\n  // },[props.wizardExistingProjectIntents]);\n\n  return /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 9,\n    className: \"wizard-pages-container mb-3 py-4 pl-4 pr-5 \",\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex\",\n    style: {\n      width: 'fit-content'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"d-flex flex-column p-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column wizard-config-intents-container px-3 py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mr-auto  mb-3 wizard-config-intent-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 29\n    }\n  }, \"Select Intents\"), /*#__PURE__*/React.createElement(Row, {\n    className: \"mx-0 my-0 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 29\n    }\n  }, props.wizardIntents && props.wizardIntents.map((intent, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    onClick: () => newIntent(intent),\n    className: checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 px-2 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 px-2 mb-2 mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"m-auto wizard-config-intent-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 41\n    }\n  }, intent))))))), /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, selectedIntents && selectedIntents.map((intent, index) => /*#__PURE__*/React.createElement(WizardIntentDetails, {\n    indexOfIntent: index,\n    intent: intent,\n    wizardIdProject: props.wizardIdProject,\n    setIntents: setSelectedIntents,\n    selectedIntents: selectedIntents,\n    isExistingProject: props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false,\n    intentStatus: intent.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-inactive-btn py-2 px-4 mb-3 text-center\",\n    style: {\n      maxWidth: '126px'\n    },\n    onClick: handleBackFromStep3To2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 29\n    }\n  }, \"Back\")), /*#__PURE__*/React.createElement(Col, {\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }, \"Save Draft\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-active-btn py-2 px-4 mr-3\",\n    onClick: () => goToTrainAgent(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 33\n    }\n  }, btnLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    size: \"sm\",\n    animation: \"border\",\n    variant: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 46\n    }\n  }) : \"Next\")))))), /*#__PURE__*/React.createElement(Col, {\n    lg: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  wizardStep: state.wizardR.wizardStep,\n  wizardIntentType: state.wizardR.wizardIntentType,\n  wizardIdProject: state.wizardR.wizardIdProject,\n  wizardExistingProject: state.wizardR.wizardExistingProject,\n  wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\n  wizardIntents: state.wizardR.wizardIntents,\n  wizardSelectedPage: state.wizardR.wizardSelectedPage,\n  wizardSelectedPost: state.wizardR.wizardSelectedPost\n});\n\nexport default connect(mapStateToProps, {\n  nextWizardStep,\n  getExistingProject,\n  getAllIntents,\n  trainAgentPage,\n  trainAgentPost,\n  resetStep3Wizard,\n  nextSpecificWizardStep,\n  resetWizardPostSelected,\n  resetWizardPageSelected\n})(WizardConfig);","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js"],"names":["React","useEffect","useState","connect","nextWizardStep","getExistingProject","getAllIntents","trainAgentPage","trainAgentPost","resetStep3Wizard","nextSpecificWizardStep","resetWizardPostSelected","resetWizardPageSelected","Swal","WizardIntentDetails","Row","Col","Spinner","useLocation","WizardConfig","props","swalWithBootstrapButtons","mixin","customClass","confirmButton","buttonsStyling","selectedIntents","setSelectedIntents","btnLoading","setBtnLoading","location","checkIntent","intent","found","findIndex","intenta","name","newIntent","fire","title","confirmButtonText","intentToPush","products","status","console","log","goToTrainAgent","length","wizardIntentType","wizardIdProject","then","handleBackFromStep3To2","wizardExistingProjectIntents","newIntents","map","answer","push","backgroundColor","width","wizardIntents","index","maxWidth","mapStateToProps","state","wizardStep","wizardR","wizardExistingProject","wizardSelectedPage","wizardSelectedPost"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { nextWizardStep,getExistingProject, getAllIntents, trainAgentPage, trainAgentPost, resetStep3Wizard, nextSpecificWizardStep, resetWizardPostSelected,resetWizardPageSelected } from '../../../redux/actions/wizardActions';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nimport WizardIntentDetails from './WizardIntentDetails';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Spinner\r\n} from 'react-bootstrap';\r\n\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport const WizardConfig = (props) => {\r\n\r\n    // Popup Config :\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n        customClass: {\r\n          confirmButton: 'wizard-pages-active-btn py-2 px-3',\r\n        },\r\n        buttonsStyling: false\r\n    });\r\n\r\n    const [selectedIntents, setSelectedIntents] = useState([]);\r\n    const [btnLoading, setBtnLoading] = useState(false);\r\n\r\n    let location = useLocation();\r\n\r\n    const checkIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n\r\n        if(found > -1) {\r\n           return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const newIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n        \r\n        // if already clicked swal the popup\r\n        if(found > -1) {    \r\n            swalWithBootstrapButtons.fire({ title: `Intent: \"${intent}\" is already selected`,confirmButtonText: 'Okay' });\r\n        } else {\r\n            // Intent selected and create an array for the products to render it from the backend\r\n            let intentToPush = {\r\n                name: intent,\r\n                products: [],\r\n                status: 'new',\r\n            };\r\n            console.log(\"Im pushing\", intentToPush)\r\n            setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush]);\r\n        }\r\n    };\r\n\r\n    const goToTrainAgent = () => {\r\n        if(selectedIntents.length > 0) {\r\n            setBtnLoading(true);\r\n\r\n            if(props.wizardIntentType === \"generic\") {\r\n                props.trainAgentPage(selectedIntents,props.wizardIdProject)\r\n                .then(() => props.nextWizardStep())\r\n                .then(() => props.resetStep3Wizard());\r\n            } else {\r\n                props.trainAgentPost(selectedIntents,props.wizardIdProject)\r\n                .then(() => props.nextWizardStep())\r\n                .then(() => props.resetStep3Wizard());\r\n            }\r\n        } else {\r\n            swalWithBootstrapButtons.fire({ title: `You have to add at least one intent !`, confirmButtonText: 'Okay' });\r\n        }\r\n    };\r\n\r\n    const handleBackFromStep3To2 = () => {\r\n        props.resetStep3Wizard(); \r\n\r\n        console.log(\"Lets see location first =>\", location);\r\n\r\n        if(props.wizardIntentType === \"generic\") {\r\n            props.resetWizardPageSelected();\r\n            props.nextSpecificWizardStep(0);\r\n        } else {\r\n            props.resetWizardPostSelected();\r\n            props.nextSpecificWizardStep(1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n            props.getExistingProject(props.wizardIdProject)\r\n            .then(() => {\r\n                props.getAllIntents(props.wizardIntentType)\r\n            })\r\n            .then(() => {\r\n                if(props.wizardExistingProjectIntents) {\r\n                    // Set selected Intent from the existing project directly :\r\n                    let intentToPush = {};\r\n                    // let newIntents = [...selectedIntents];\r\n                    let newIntents = [];\r\n        \r\n                    props.wizardExistingProjectIntents.map(intent => {\r\n                        // console.log(\"Existing shit =>\", intent);\r\n                        intentToPush = {\r\n                            name: intent.name,\r\n                            products: intent.answer,\r\n                            status: 'old',\r\n                        };\r\n                        newIntents.push(intentToPush);\r\n                    });\r\n                    // console.log(\"Final intent =>\", newIntents);\r\n                    setSelectedIntents(newIntents);\r\n                }\r\n            });\r\n    },[]);\r\n\r\n    // useEffect(() => {\r\n    //     if(props.wizardExistingProjectIntents) {\r\n    //         // Set selected Intent from the existing project directly :\r\n    //         let intentToPush = {};\r\n    //         // let newIntents = [...selectedIntents];\r\n    //         let newIntents = [];\r\n\r\n    //         props.wizardExistingProjectIntents.map(intent => {\r\n    //             // console.log(\"Existing shit =>\", intent);\r\n    //             intentToPush = {\r\n    //                 name: intent.name,\r\n    //                 products: intent.answer,\r\n    //                 status: 'old',\r\n    //             };\r\n    //             newIntents.push(intentToPush);\r\n    //         });\r\n    //         // console.log(\"Final intent =>\", newIntents);\r\n    //         setSelectedIntents(newIntents);\r\n    //     }\r\n    //     // To Remove the listner\r\n    //     return () => {};\r\n    // },[props.wizardExistingProjectIntents]);\r\n\r\n    return (\r\n        <Row className=\"mt-1\">  \r\n            <Col lg={1} />\r\n    \r\n            <Col lg={9} className=\"wizard-pages-container mb-3 py-4 pl-4 pr-5 \" style={{backgroundColor: 'white'}}>\r\n                \r\n                {/* INTENTS */}\r\n                <Row className=\"d-flex\" style={{width: 'fit-content'}}>\r\n                    <Col lg={12} className=\"d-flex flex-column p-3\">\r\n                        <div className=\"d-flex flex-column wizard-config-intents-container px-3 py-2\">\r\n                            <p className=\"mr-auto  mb-3 wizard-config-intent-title\">Select Intents</p>\r\n                            \r\n                            <Row className=\"mx-0 my-0 d-flex\">\r\n                                {\r\n                                props.wizardIntents \r\n                                &&\r\n                                props.wizardIntents.map((intent,index) => (\r\n                                    <div \r\n                                        key={index}\r\n                                        onClick={() => newIntent(intent)} \r\n                                        className={checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 px-2 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 px-2 mb-2 mr-1\"}\r\n                                    >\r\n                                        <p className=\"m-auto wizard-config-intent-name\">{intent}</p>\r\n                                        {/* <ReactTooltip id='intentTip' textColor='#fff' backgroundColor='#E5007D' /> */}\r\n                                    </div>\r\n                                ))}\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row className=\"d-flex mt-1\">  \r\n                    {selectedIntents &&\r\n                        selectedIntents.map((intent,index) => \r\n                        <WizardIntentDetails \r\n                            indexOfIntent={index} \r\n                            intent={intent} \r\n                            wizardIdProject={props.wizardIdProject} \r\n                            setIntents={setSelectedIntents} \r\n                            selectedIntents={selectedIntents} \r\n                            isExistingProject={props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false} \r\n                            intentStatus={intent.status}\r\n                        />\r\n                    )}\r\n                </Row>\r\n             \r\n                {/* BTNS */}\r\n                <Col lg={12}>\r\n                    <Row className=\"mb-3\">\r\n                        <Col lg={6}>\r\n                            <div className=\"wizard-pages-inactive-btn py-2 px-4 mb-3 text-center\" style={{maxWidth: '126px'}} onClick={handleBackFromStep3To2}>\r\n                                {/* MUST RESET ALL WIZARD 3 VARS */}\r\n                                Back\r\n                            </div>\r\n                        </Col>\r\n\r\n                        <Col lg={6}>\r\n                            <Row className=\"d-flex\">\r\n                                <div className={\"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\"}>Save Draft</div>\r\n                                \r\n                                <div className={\"wizard-pages-active-btn py-2 px-4 mr-3\"} onClick={() => goToTrainAgent()}>\r\n                                    {\r\n                                        btnLoading\r\n                                        ?\r\n                                            (<Spinner size=\"sm\" animation=\"border\" variant=\"light\" />)\r\n                                        :\r\n                                            \"Next\"\r\n                                    }\r\n                                </div>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n            </Col>\r\n    \r\n            <Col lg={2} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    wizardStep: state.wizardR.wizardStep,\r\n    wizardIntentType: state.wizardR.wizardIntentType,\r\n    wizardIdProject: state.wizardR.wizardIdProject,\r\n    wizardExistingProject: state.wizardR.wizardExistingProject,\r\n    wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\r\n    wizardIntents: state.wizardR.wizardIntents,\r\n    wizardSelectedPage: state.wizardR.wizardSelectedPage,\r\n    wizardSelectedPost: state.wizardR.wizardSelectedPost,\r\n})\r\n\r\nexport default connect(mapStateToProps, {nextWizardStep,getExistingProject, getAllIntents, trainAgentPage,trainAgentPost, resetStep3Wizard, nextSpecificWizardStep, resetWizardPostSelected,resetWizardPageSelected })(WizardConfig)\r\n"]},"metadata":{},"sourceType":"module"}