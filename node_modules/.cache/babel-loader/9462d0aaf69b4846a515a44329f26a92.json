{"ast":null,"code":"var _jsxFileName = \"/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardIntentDetails.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { addGenericResponse, updateGenericResponse } from '../../../redux/actions/wizardActions';\nimport { host } from '../../../config';\nimport { Row, Col, Popover, Overlay, Modal, Image, Form, Spinner } from 'react-bootstrap';\nimport WizardMiracleInput from './WizardMiracleInput';\nimport ReactTooltip from 'react-tooltip';\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { IoIosArrowDown, IoIosClose } from 'react-icons/io';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { MdAddCircleOutline } from 'react-icons/md'; // import { BsLink45Deg } from 'react-icons/bs';\n// const LETTER_ICON = require('../../../assets/images/home/3a.png');\n// const LETTER_ICON_ACTIVE = require('../../../assets/images/home/3a_active.png');\n// const EMO_ICON = require('../../../assets/images/home/emo.png');\n// const EMO_ICON_ACTIVE = require('../../../assets/images/home/emo_active.png');\n// const BALISE_ICON = require('../../../assets/images/home/balise.png');\n// const BALISE_ICON_ACTIVE = require('../../../assets/images/home/balise_active.png');\n\nfunction WizardIntentDetails(props) {\n  // Popup Config:\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'wizard-pages-active-btn-alert'\n    },\n    buttonsStyling: false\n  }); // New Shit Generic:\n\n  const [GenericResponse, setGenericResponse] = useState('');\n  const [GenericTags, setGenericTags] = useState(false);\n  const [GenericEmojis, setGenericEmojis] = useState(false);\n  const [GenericKeyboard, setGenericKeyboard] = useState(false);\n  const [GenericBtnType, setGenericBtnType] = useState('url');\n  const [GenericBtnTitle, setGenericBtnTitle] = useState('');\n  const [GenericBtnValue, setGenericBtnValue] = useState('');\n  const [GenericBtns, setGenericBtns] = useState([]);\n\n  const resetGeneric = () => {\n    setGenericResponse('');\n    setGenericTags(false);\n    setGenericEmojis(false);\n    setGenericKeyboard(false);\n    setGenericBtnType('url');\n    setGenericBtnTitle('');\n    setGenericBtnValue('');\n    setGenericBtns([]);\n  };\n\n  const handleSaveGenericResponse = (intent, wizardIdProject) => {\n    let project = {\n      genericAnswer: GenericResponse,\n      intent: intent\n    };\n\n    if (GenericResponse === \"\") {\n      swalWithBootstrapButtons.fire({\n        title: 'Generic Response is empty !',\n        confirmButtonText: 'Okay'\n      });\n    } else if (intentState === 'save' && GenericResponse !== '') {\n      setSaveUpdateLoading(true);\n      props.addGenericResponse(project, wizardIdProject).then(() => {\n        setIntentState('update');\n        setSaveUpdateLoading(false);\n      }).catch(() => {\n        setSaveUpdateLoading(false);\n        swalWithBootstrapButtons.fire({\n          title: 'Error while saving the generic response. Try Again !',\n          confirmButtonText: 'Okay'\n        });\n      });\n    } else if (intentState === 'update' && GenericResponse !== '') {\n      setSaveUpdateLoading(true);\n      props.updateGenericResponse(project, wizardIdProject).then(() => {\n        setSaveUpdateLoading(false);\n      }).catch(() => {\n        setSaveUpdateLoading(false);\n        swalWithBootstrapButtons.fire({\n          title: 'Error while updating the generic response. Try Again !',\n          confirmButtonText: 'Okay'\n        });\n      });\n    }\n  }; // New Shit Specific:\n\n\n  const [SpecificResponse, SetSpecificResponse] = useState('');\n  const [SpecificKeyBoard, setSpecificKeyBoard] = useState(false);\n  const [SpecificEmoji, setSpecificEmoji] = useState(false);\n  const [SpecificTags, setSpecificTags] = useState(false);\n  const [SpecificBtnType, setSpecificType] = useState('url');\n  const [SpecificBtnTitle, setSpecificTitle] = useState('');\n  const [SpecificBtnValue, setSpecificValue] = useState('');\n  const [SpecificBtns, setSpecificBtns] = useState([]);\n\n  const resetSpecific = () => {\n    SetSpecificResponse('');\n    setSpecificTags(false);\n    setSpecificEmoji(false);\n    setSpecificKeyBoard(false);\n    setSpecificType('url');\n    setSpecificTitle('');\n    setSpecificValue('');\n    setSpecificBtns([]);\n  }; // Products\n\n\n  const [productName, setProductName] = useState('');\n  const [savedProductToSend, setSavedProductToSend] = useState('');\n  const [products, setProducts] = useState([]); // Categories\n\n  const [newCategory, setNewCategory] = useState('');\n  const [categorySelected, setCategorySelected] = useState('');\n  const [allCategories, setAllCategories] = useState([]);\n  const [CategorieModal, setCategoryModal] = useState(false);\n  const [showModalInput, setShowModalInput] = useState(false); // New Shit other:\n\n  const [saveUpdateLoading, setSaveUpdateLoading] = useState(false);\n  const [intentState, setIntentState] = useState('save');\n  const [SpecificPopover, setSpecificPopover] = useState(false);\n  const [SpecificTarget, setSpecificTarget] = useState(null);\n  const SpecificRef = useRef(null);\n  /* FUNCTIONS */\n\n  const handleCategoriesModal = () => {\n    setSpecificPopover(false);\n    setCategoryModal(!CategorieModal);\n  };\n\n  const handleSpecificPopover = event => {\n    setSpecificPopover(!SpecificPopover);\n    setSpecificTarget(event.target);\n  }; // Categories & Products\n\n\n  const addNewProduct = idProjet => {\n    // First update api : entity === categorie :\n    let productToSend = {\n      idPage: props.wizardSelectedPage.id,\n      typePage: props.wizardSelectedPage.platform,\n      entity: productName,\n      intent: props.intent,\n      genericAnswer: GenericResponse,\n      specificAnswer: SpecificResponse,\n      categorie: productName,\n      buttons: SpecificBtns\n    };\n    axios.put(`${host}/api/v1/secure/project/firstupdate/${idProjet}`, productToSend, {\n      headers: {\n        'authorization': 'Bearer ' + localStorage.getItem('authtoken')\n      }\n    }).then(res => {\n      console.log('first update response =>', res.data.data);\n\n      if (res.data.data === \"not exist\") {\n        // Call the categories api :\n        axios.get(`${host}/api/v1/secure/project/get/entitiesproject/${props.wizardSelectedPage.platform}/${props.wizardSelectedPage.id}`).then(res => {\n          console.log(\"get categories for modal /get/entitiesproject =>\", res.data.data);\n          setAllCategories(res.data.data);\n          SpecificPopover(!SpecificPopover);\n          setSavedProductToSend(productToSend);\n          CategorieModal(true);\n        }).catch(err => console.log(\"addNewProduct WizardIntentDetails =>\", err));\n      } else {\n        setProducts(products => [...products, productToSend]); // Reset\n\n        SpecificPopover(!SpecificPopover);\n        setProductName('');\n        SetSpecificResponse('');\n      }\n\n      ;\n    }).catch(err => console.log(\"Wizard Intent Detail addNewProduct fct first Update API err ===>\", err));\n  };\n\n  const addNewProductViaModal = idProjet => {\n    // Send the update with the new category name :) :\n    let productToSend = savedProductToSend;\n    productToSend.categorie = categorySelected;\n    console.log(\"Category Selected To sennnnd\", categorySelected, \" and product =>>>\", productToSend);\n    return axios.put(host + `/api/v1/secure/project/update/${idProjet}`, productToSend, {\n      headers: {\n        'authorization': 'Bearer ' + localStorage.getItem('authtoken')\n      }\n    }).then(res => {\n      console.log('UPDATE API response =>', res.data); // set the products from => { res.data.data.entities.children }\n\n      setProducts(products => [...products, savedProductToSend]); // setProducts(res.data.data.entities.children);\n      // // Reset\n\n      setProductName('');\n      SetSpecificResponse('');\n      setCategorySelected('');\n      CategorieModal(false);\n    }).catch(err => console.log(\"addNewProductViaModal => api update err =>> \", err));\n  };\n\n  const deleteProduct = (product, index) => {\n    let oldProducts = [...products];\n    console.log(\"To delete with\", index, \" \", product); // oldProducts.splice(index,1);\n    // setProducts(oldProducts);    \n  };\n\n  const pushNewCategory = () => {\n    let categoryToPush = {\n      name: newCategory\n    };\n    setAllCategories(categories => [...categories, categoryToPush]);\n    setCategorySelected(categoryToPush.name);\n    setShowModalInput(false);\n    setNewCategory('');\n  };\n\n  const addNewQuickReply = quickRep => {// let oldQuickReplies = [...quickReplies]\n    // let quickReplyToPush = {\n    //     type: quickReplyType,\n    //     title: quickReplyTitle,\n    //     value: quickReplyValue,\n    // };\n    // oldQuickReplies.push(quickReplyToPush);\n    // // reset\n    // setQuickReplyType('url');\n    // setQuickReplyTitle('');\n    // setQuickReplyValue('');\n    // // update new Btns :\n    // setQuickReplies(oldQuickReplies);\n    // setShowButtonsModal(false); \n    // SpecificPopover(true);\n  };\n\n  const deleteQuickReply = index => {// let oldQuickReplies = [...quickReplies];\n    // oldQuickReplies.splice(index,1);\n    // setQuickReplies(oldQuickReplies); \n  };\n\n  return /*#__PURE__*/React.createElement(Col, {\n    lg: 5,\n    className: \"mb-3 mr-3\",\n    key: props.intent.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column wizard-config-intents-container\",\n    style: {\n      borderRadius: '0.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-between mx-0 p-0 wizard-config-intents-top-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"my-auto wizard-config-intent-title p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 33\n    }\n  }, props.intent)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FaTrashAlt, {\n    color: \"#818E94\",\n    size: 18,\n    className: \"m-auto\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: () => props.stateManagment(props.selectedIntents.filter(intent => intent !== props.intent)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(IoIosArrowDown, {\n    color: \"#818E94\",\n    size: 18,\n    className: \"my-auto ml-1\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(WizardMiracleInput, {\n    label: \"Generic Response\",\n    response: GenericResponse,\n    handleResponse: setGenericResponse,\n    showTags: GenericTags,\n    handleTags: setGenericTags,\n    showEmojis: GenericEmojis,\n    handleEmojis: setGenericEmojis,\n    showKeyboard: GenericKeyboard,\n    handleKeyboard: setGenericKeyboard,\n    BtnType: GenericBtnType,\n    handleBtnType: setGenericBtnType,\n    BtnTitle: GenericBtnTitle,\n    handleBtnTitle: setGenericBtnTitle,\n    BtnValue: GenericBtnValue,\n    handleBtnValue: setGenericBtnValue,\n    Btns: GenericBtns,\n    handleBtns: setGenericBtns,\n    reset: resetGeneric,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 21\n    }\n  }, intentState === 'save' ? !saveUpdateLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => handleSaveGenericResponse(props.intent, props.wizardIdProject),\n    className: \"ml-auto mr-2 mb-2 py-2 px-3 wizard-config-update-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 33\n    }\n  }, \"Save\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex ml-auto mr-2 mb-2 py-2 px-4 wizard-config-update-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"grow\",\n    size: \"sm\",\n    variant: \"light\",\n    className: \"m-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 37\n    }\n  })) : !saveUpdateLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => handleSaveGenericResponse(props.intent, props.wizardIdProject),\n    className: \"ml-auto mr-2 mb-2 py-2 px-3 wizard-config-update-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 33\n    }\n  }, \"Update\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex ml-auto mr-2 mb-2 py-2 px-4 wizard-config-update-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"grow\",\n    size: \"sm\",\n    variant: \"light\",\n    className: \"m-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 37\n    }\n  }))), intentState === 'update' && /*#__PURE__*/React.createElement(Col, {\n    lg: 11,\n    className: \"mx-auto mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 25\n    }\n  }, products.length > 0 && products.map((product, index) => /*#__PURE__*/React.createElement(Col, {\n    key: index,\n    lg: 5,\n    className: \"d-flex flex-row mb-3 py-2 wizard-config-product-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 37\n    }\n  }, product.entity.length > 8 ? /*#__PURE__*/React.createElement(\"p\", {\n    \"data-for\": \"entityTip\",\n    \"data-tip\": product.entity,\n    className: \"m-auto wizard-config-product-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 45\n    }\n  }, product.entity.substring(0, 7), \"...\") : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"m-auto wizard-config-product-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 45\n    }\n  }, product.entity), /*#__PURE__*/React.createElement(AiOutlineCloseCircle, {\n    className: \"my-auto ml-1\",\n    color: \"#F49BCC\",\n    size: \"20\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: () => deleteProduct(product, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"entityTip\",\n    textColor: \"#fff\",\n    backgroundColor: \"#E5007D\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 5,\n    onClick: handleSpecificPopover,\n    className: \"wizard-config-add-product-box mb-3 py-2 px-3\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex justify-content-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(MdAddCircleOutline, {\n    className: \"my-auto mr-2\",\n    color: \"#4080FC\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"wizard-config-add-product-name my-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 37\n    }\n  }, \"Add product\"))))))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: SpecificRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Overlay, {\n    show: SpecificPopover,\n    target: SpecificTarget,\n    container: SpecificRef.current,\n    placement: \"top-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Popover, {\n    id: \"popover-specific\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Popover.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(IoIosClose, {\n    className: \"ml-auto\",\n    color: '#9F9F9F',\n    size: '25',\n    onClick: handleSpecificPopover,\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"wizard-config-textarea-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 33\n    }\n  }, \"Product name\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => setProductName(e.target.value),\n    value: productName,\n    className: \"wizard-config-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(WizardMiracleInput, {\n    label: \"Specific Response\",\n    response: SpecificResponse,\n    handleResponse: SetSpecificResponse,\n    showTags: SpecificTags,\n    handleTags: setSpecificTags,\n    showEmojis: SpecificEmoji,\n    handleEmojis: setSpecificEmoji,\n    showKeyboard: SpecificKeyBoard,\n    handleKeyboard: setSpecificKeyBoard,\n    BtnType: SpecificBtnType,\n    handleBtnType: setSpecificType,\n    BtnTitle: SpecificBtnTitle,\n    handleBtnTitle: setSpecificTitle,\n    BtnValue: SpecificBtnValue,\n    handleBtnValue: setSpecificValue,\n    Btns: SpecificBtns,\n    handleBtns: setSpecificBtns,\n    reset: resetSpecific,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mr-2 ml-2 mt-2 mb-2 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-auto mb-2 py-3 px-3 wizard-config-update-btn\",\n    onClick: () => addNewProduct(props.wizardIdProject),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 33\n    }\n  }, \"Add\")))))), /*#__PURE__*/React.createElement(Modal, {\n    show: CategorieModal,\n    onHide: handleCategoriesModal,\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IoIosClose, {\n    className: \"ml-auto mr-3\",\n    color: '#9F9F9F',\n    size: '28',\n    onClick: handleCategoriesModal,\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"m-auto wizard-config-intent-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 25\n    }\n  }, \"Please specify the category\")), /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 10,\n    className: \"d-flex justify-content-between p-0 mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 8,\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 29\n    }\n  }, showModalInput && /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"mr-auto w-100 my-auto add-new-category-input-container\",\n    onChange: e => setNewCategory(e.target.value),\n    value: newCategory // onKeyDown={(e) => e.key === 'Enter' && pushNewCategory()}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 4,\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 29\n    }\n  }, !showModalInput && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ml-auto my-auto wizard-config-intent-name\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: () => setShowModalInput(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 33\n    }\n  }, \"create new\"))), /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"d-flex w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"wizard-config-intent-title\",\n    as: \"select\",\n    disabled: showModalInput || allCategories.length === 0,\n    onChange: e => setCategorySelected(e.target.value),\n    value: categorySelected,\n    custom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    className: \"wizard-config-intent-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 37\n    }\n  }, \"Choose Category...\"), allCategories.length > 0 && allCategories.map((category, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    className: \"wizard-config-intent-title\",\n    value: category.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 41\n    }\n  }, category.name))))), /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 21\n    }\n  }, showModalInput ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-auto mb-2 py-3 px-4 wizard-config-update-btn\",\n    style: {\n      backgroundColor: '#009EE3',\n      cursor: 'pointer'\n    },\n    onClick: () => pushNewCategory(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 25\n    }\n  }, \"Create\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"m-auto mb-2 py-3 px-4 wizard-config-update-btn\",\n    style: {\n      backgroundColor: allCategories.length > 0 && categorySelected ? '#009EE3' : '#707070',\n      cursor: allCategories.length > 0 && categorySelected ? 'pointer' : 'not-allowed'\n    },\n    onClick: () => allCategories.length > 0 && categorySelected ? addNewProductViaModal(props.wizardIdProject) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 25\n    }\n  }, \"Add\")))));\n}\n\nconst mapStateToProps = state => ({\n  wizardIdProject: state.wizardR.wizardIdProject,\n  wizardIntentType: state.wizardR.wizardIntentType,\n  wizardSelectedPage: state.wizardR.wizardSelectedPage,\n  wizardSelectedPost: state.wizardR.wizardSelectedPost // wizardStep: state.wizardR.wizardStep,\n\n});\n\nexport default connect(mapStateToProps, {\n  addGenericResponse,\n  updateGenericResponse\n})(WizardIntentDetails);\n/**\r\n *\r\n * \r\n * Generic Input\r\n <div className=\"mr-2 ml-2 mt-2 mb-2\">\r\n <label className=\"wizard-config-textarea-label\">Generic Response</label>\r\n <Col lg={12}>\r\n     <Row className=\"d-flex mb-1\">\r\n         <div className=\"d-flex mr-2\">\r\n             <Image src={showGenericTags ? BALISE_ICON_ACTIVE : BALISE_ICON} onClick={handleGenericTagsPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '19px', cursor: 'pointer'}} />    \r\n         </div>                                \r\n\r\n         <div className=\"d-flex mr-2\">\r\n             <Image src={showEmojiPickerGeneric ? EMO_ICON_ACTIVE : EMO_ICON} onClick={handleGenericEmojiPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '18px', cursor: 'pointer'}} />\r\n         </div>\r\n\r\n         <div className=\"d-flex mr-2\">\r\n             <Image src={showKeyBoardGeneric ? LETTER_ICON_ACTIVE : LETTER_ICON} onClick={handleGenericKeyboardPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '21px', cursor: 'pointer'}} />\r\n             \r\n             {showKeyBoardGeneric &&\r\n                 <div className=\"wizard-config-keyboard-container\">\r\n                     <Keyboard onChange={(input) => handleArabicKeyboardChange(input,\"generic\")} onKeyPress={(button) => onKeyPress(button,\"generic\")} layout={layout} />\r\n                 </div>\r\n             }\r\n             {showEmojiPickerGeneric &&\r\n                 <div className=\"wizard-config-emoji-container\" >\r\n                     <Picker onEmojiClick={(e,obj) => onEmojiClick(e,obj,\"generic\")} />\r\n                 </div>\r\n             }\r\n         </div>\r\n     </Row>\r\n </Col>\r\n <textarea onChange={(e) => setGenericResponse(e.target.value)} onFocus={() => console.log(\"Hey I'm Focused\")} value={genericResponse} className=\"wizard-config-textarea\" rows=\"5\"/>\r\n</div>\r\n\r\n\r\n\r\n Generic Tags modal \r\n<Modal show={showGenericTags} size=\"sm\" centered>\r\n<Row className=\"d-flex w-100\">\r\n    <IoIosClose className=\"ml-auto my-auto pt-1\" color={'#9F9F9F'} size={30} onClick={() => setShowGenericTags(false)} style={{cursor: 'pointer'}} />\r\n</Row>\r\n\r\n<Row className=\"d-flex w-100\">\r\n    <h3 className=\"m-auto wizard-config-intent-title\">Choose one tag variable</h3>\r\n</Row>\r\n\r\n<Modal.Body>  \r\n    <Row className=\"d-flex\">\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##FIRST_NAME##',\"generic\")}>First Name</p>\r\n        </Col>\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##LAST_NAME##',\"generic\")}>Last Name</p>\r\n        </Col>\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##FULL_NAME##',\"generic\")}>Full Name</p>\r\n        </Col>\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##PAGE_NAME##',\"generic\")}>Page Name</p>\r\n        </Col>\r\n    </Row>\r\n</Modal.Body>\r\n</Modal>\r\n\r\n  FUNCTIONS \r\n    // Generic :\r\n    const handleGenericTagsPopover = (event) => {\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(!showGenericTags);\r\n        setTargetGenericTags(event.target);\r\n\r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n    };\r\n\r\n    const handleGenericKeyboardPopover = () => {\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowGenericTags(false);\r\n        setShowKeyBoardGeneric(!showKeyBoardGeneric);\r\n\r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n    };\r\n\r\n    const handleGenericEmojiPopover = () => {\r\n        setShowGenericTags(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowEmojiPickerGeneric(!showEmojiPickerGeneric);\r\n\r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n    };\r\n\r\n\r\n\r\n     Specific Tags Popover \r\n    <div ref={refSepecificTags}>\r\n    <Overlay\r\n        show={showSpecificTags}\r\n        target={targetSpecificTags}\r\n        placement=\"top\"\r\n        container={refSepecificTags.current}\r\n        containerPadding={20}\r\n    >\r\n        <Row className=\"d-flex\" style={{ width: '200px', height: '200px', background: '#fff', borderRadius: '0.3rem', marginBottom: \"9px\"}}>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">First Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">Last Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">Full Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">Page Name</p>\r\n            </Col>\r\n        </Row>\r\n    </Overlay>\r\n</div>\r\n\r\n\r\n const handleSpecificKeyboardPopover = () => {\r\n        // Generic\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(false);\r\n        \r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(!showKeyBoard);\r\n    };\r\n\r\n    const handleSpecificEmojiPopover = () => {\r\n        // Generic\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(false);\r\n        \r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowKeyBoard(false);\r\n        setShowEmojiPicker(!showEmojiPicker);\r\n    };\r\n\r\n    const handleSpecificTagsPopover = (event) => {\r\n        // Generic\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(false);\r\n\r\n        // Specific\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n        SpecificPopover(false);\r\n        setShowSpecificTags(true);\r\n\r\n    };\r\n\r\n     const handleArabicKeyboardChange = (input,type) => {\r\n        if(type === \"generic\") {\r\n            let newGenericResponse = `${genericResponse}${input.charAt(input.length - 1)}`;\r\n            setGenericResponse(newGenericResponse);\r\n        } else {\r\n            let newSpecifiResponse = `${SpecificResponse}${input.charAt(input.length - 1)}`;\r\n            SetSpecificResponse(newSpecifiResponse);\r\n        }\r\n    };\r\n    \r\n    const onKeyPress = (button,type) => {\r\n        if(type === \"generic\") {\r\n            if (button.toString() == \"{enter}\") {\r\n                setShowKeyBoardGeneric(false);\r\n            }\r\n        } else {\r\n            if (button.toString() == \"{enter}\") {\r\n                setShowKeyBoard(false);\r\n            }\r\n        }\r\n    };\r\n    \r\n    const onEmojiClick = (event, emojiObject,type) => {\r\n        if(type === \"generic\") {\r\n            let newGenericResponse = `${genericResponse}${emojiObject.emoji}`;\r\n            setGenericResponse(newGenericResponse);\r\n        } else {\r\n            let newSpecifiResponse = `${SpecificResponse}${emojiObject.emoji}`;\r\n            SetSpecificResponse(newSpecifiResponse);\r\n        }\r\n    };\r\n\r\n    const pushSelectedTag = (tag,type) => {\r\n\r\n        if(type === \"generic\") {\r\n            let newGenericResponse = `${genericResponse} ${tag} `;\r\n            setGenericResponse(newGenericResponse);\r\n            setShowGenericTags(false);\r\n        } else {\r\n            let newSpecifiResponse = `${SpecificResponse} ${tag} `;\r\n            SetSpecificResponse(newSpecifiResponse);\r\n            setShowSpecificTags(false);\r\n        }\r\n    };\r\n\r\n\r\n    {/* Specific Tags modal \r\n    <Modal show={showSpecificTags} size=\"sm\" centered>   \r\n    <Row className=\"d-flex w-100\">\r\n        <IoIosClose className=\"ml-auto my-auto pt-1\" color={'#9F9F9F'} size={30} onClick={() => { setShowSpecificTags(false); SpecificPopover(true); }} style={{cursor: 'pointer'}} />\r\n    </Row>\r\n\r\n    <Row className=\"d-flex w-100\">\r\n        <h3 className=\"m-auto wizard-config-intent-title\">Choose one tag variable</h3>\r\n    </Row>\r\n   \r\n    <Modal.Body>  \r\n        <Row className=\"d-flex\">\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##FIRST_NAME##', \"specific\"); setShow(true); }}>First Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##LAST_NAME##', \"specific\"); setShow(true); }}>Last Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##FULL_NAME##', \"specific\"); setShow(true); }}>Full Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##PAGE_NAME##', \"specific\"); setShow(true); }}>Page Name</p>\r\n            </Col>\r\n        </Row>\r\n    </Modal.Body>\r\n</Modal>\r\n\r\n{/* Specific Btns (Quicks replies Modal) \r\n<Modal show={showButtonsModal} size=\"sm\" centered>   \r\n    <Modal.Body>  \r\n        <Row className=\"justify-content-center\">\r\n            <Col md={12}>\r\n                <Row>\r\n                    <Col md={12} className=\"mt-2 mb-3\">\r\n                        <Form.Control as=\"select\" onChange={(e) => setQuickReplyType(e.target.value)} defaultValue=\"url\">\r\n                            <option value=\"url\">Url</option>\r\n                            <option value=\"call\">Call</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                    \r\n                    <Col md={12} className=\"mt-2\">\r\n                        <Row className=\"d-flex\">\r\n                            <Col md={12}>\r\n                                <Form.Control type={\"text\"} onChange={(e) => setQuickReplyTitle(e.target.value)} value={quickReplyTitle}  placeholder=\"Title\" />\r\n                            </Col>\r\n\r\n                            <Col md={12} className=\"d-flex\">\r\n                                <p className=\"ml-auto wizard-config-input-feedback\">Remaining characters: 20</p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    <Col md={12} className=\"mb-2\">\r\n                        <Form.Control type={quickReplyType === \"url\" ? \"text\" : \"number\"} onChange={(e) => setQuickReplyValue(e.target.value)} value={quickReplyValue}  placeholder={quickReplyType === \"url\" ? \"www.example.com\" : \"(+216) 99 999 999\"}  />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col md={11} className=\"d-flex pl-1\">\r\n                <div className=\"wizard-pages-active-btn py-3 px-5\" onClick={() => addNewQuickReply()}>\r\n                    OK\r\n                </div>\r\n            </Col>\r\n           \r\n        </Row>\r\n    </Modal.Body>\r\n</Modal>\r\n\r\n\r\n\r\n <div className=\"m-2\">\r\n    <label className=\"wizard-config-textarea-label\">Specific response</label>\r\n    <Row>\r\n            <Col lg={12}>\r\n            <Row className=\"d-flex mb-1 ml-2\">\r\n                <div className=\"d-flex mr-2\">\r\n                    <Image src={showSpecificTags ? BALISE_ICON_ACTIVE : BALISE_ICON} onClick={handleSpecificTagsPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '19px', cursor: 'pointer'}} />    \r\n                </div>                                \r\n\r\n                <div className=\"d-flex mr-2\">\r\n                    <Image src={showEmojiPicker ? EMO_ICON_ACTIVE : EMO_ICON} onClick={handleSpecificEmojiPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '18px', cursor: 'pointer'}} />\r\n                </div>\r\n\r\n                <div className=\"d-flex mr-2\">\r\n                    <Image src={showKeyBoard ? LETTER_ICON_ACTIVE : LETTER_ICON} onClick={handleSpecificKeyboardPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '21px', cursor: 'pointer'}} />\r\n                    \r\n                    {showKeyBoard &&\r\n                        <div className=\"wizard-config-keyboard-container\">\r\n                            <Keyboard onChange={handleArabicKeyboardChange} onKeyPress={onKeyPress} layout={layout} />\r\n                        </div>\r\n                    }\r\n                    {showEmojiPicker &&\r\n                        <div className=\"wizard-config-emoji-container\" >\r\n                            <Picker onEmojiClick={onEmojiClick} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </Row>\r\n        </Col> \r\n\r\n        <Col lg={12} className=\"mb-2\">\r\n        <textarea onChange={(e) => setSpecificResponse(e.target.value)} value={SpecificResponse} className=\"wizard-config-textarea\" rows=\"5\"/>\r\n        <hr style={{borderColor: '#B4B4B4', borderWidth: '1.5px'}}/>\r\n    </Col> \r\n    \r\n        Quick replies \r\n        <Col lg={12} className=\"d-flex flex-row mb-2\">\r\n    \r\n        {quickReplies.map((quickReply,index) => \r\n            <Col key={index} lg={3} className=\"mr-2\">\r\n                <Row className=\"wizard-config-quick-replies-btn py-1\">\r\n                    <p className=\"m-auto\" data-for='quickReplyTip' data-tip={quickReply.value}>{quickReply.type}</p>\r\n                    <AiOutlineCloseCircle className=\"m-auto\" color={\"white\"} size={\"17\"} style={{cursor: 'pointer'}} onClick={() => deleteQuickReply(index)} />\r\n                </Row>\r\n                <ReactTooltip id='quickReplyTip' textColor='#fff' backgroundColor='#009EE3' />\r\n            </Col>\r\n        )}\r\n\r\n        // ADD BUTTON\r\n        {quickReplies.length < 3\r\n        &&\r\n        <Col lg={3}>\r\n            <Row \r\n                className=\"wizard-config-quick-replies-btn py-1\" \r\n                \r\n                onClick={() =>{ setShowButtonsModal(true); setShow(false); }}\r\n            >\r\n                <p className=\"m-auto\">Add button</p>\r\n            </Row>\r\n        </Col>\r\n        }\r\n\r\n    </Col>\r\n</Row>\r\n</div>\r\n\r\n */","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardIntentDetails.js"],"names":["React","useState","useRef","useEffect","axios","connect","addGenericResponse","updateGenericResponse","host","Row","Col","Popover","Overlay","Modal","Image","Form","Spinner","WizardMiracleInput","ReactTooltip","Swal","FaTrashAlt","IoIosArrowDown","IoIosClose","AiOutlineCloseCircle","MdAddCircleOutline","WizardIntentDetails","props","swalWithBootstrapButtons","mixin","customClass","confirmButton","buttonsStyling","GenericResponse","setGenericResponse","GenericTags","setGenericTags","GenericEmojis","setGenericEmojis","GenericKeyboard","setGenericKeyboard","GenericBtnType","setGenericBtnType","GenericBtnTitle","setGenericBtnTitle","GenericBtnValue","setGenericBtnValue","GenericBtns","setGenericBtns","resetGeneric","handleSaveGenericResponse","intent","wizardIdProject","project","genericAnswer","fire","title","confirmButtonText","intentState","setSaveUpdateLoading","then","setIntentState","catch","SpecificResponse","SetSpecificResponse","SpecificKeyBoard","setSpecificKeyBoard","SpecificEmoji","setSpecificEmoji","SpecificTags","setSpecificTags","SpecificBtnType","setSpecificType","SpecificBtnTitle","setSpecificTitle","SpecificBtnValue","setSpecificValue","SpecificBtns","setSpecificBtns","resetSpecific","productName","setProductName","savedProductToSend","setSavedProductToSend","products","setProducts","newCategory","setNewCategory","categorySelected","setCategorySelected","allCategories","setAllCategories","CategorieModal","setCategoryModal","showModalInput","setShowModalInput","saveUpdateLoading","SpecificPopover","setSpecificPopover","SpecificTarget","setSpecificTarget","SpecificRef","handleCategoriesModal","handleSpecificPopover","event","target","addNewProduct","idProjet","productToSend","idPage","wizardSelectedPage","id","typePage","platform","entity","specificAnswer","categorie","buttons","put","headers","localStorage","getItem","res","console","log","data","get","err","addNewProductViaModal","deleteProduct","product","index","oldProducts","pushNewCategory","categoryToPush","name","categories","addNewQuickReply","quickRep","deleteQuickReply","borderRadius","cursor","stateManagment","selectedIntents","filter","length","map","substring","current","e","value","category","backgroundColor","mapStateToProps","state","wizardR","wizardIntentType","wizardSelectedPost"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { addGenericResponse, updateGenericResponse } from '../../../redux/actions/wizardActions';\r\nimport { host } from '../../../config';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Popover,\r\n    Overlay,\r\n    Modal,\r\n    Image,\r\n    Form,\r\n    Spinner,\r\n} from 'react-bootstrap';\r\nimport WizardMiracleInput from './WizardMiracleInput';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\n\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport { IoIosArrowDown,IoIosClose } from 'react-icons/io';\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { MdAddCircleOutline } from 'react-icons/md';\r\n// import { BsLink45Deg } from 'react-icons/bs';\r\n\r\n// const LETTER_ICON = require('../../../assets/images/home/3a.png');\r\n// const LETTER_ICON_ACTIVE = require('../../../assets/images/home/3a_active.png');\r\n// const EMO_ICON = require('../../../assets/images/home/emo.png');\r\n// const EMO_ICON_ACTIVE = require('../../../assets/images/home/emo_active.png');\r\n// const BALISE_ICON = require('../../../assets/images/home/balise.png');\r\n// const BALISE_ICON_ACTIVE = require('../../../assets/images/home/balise_active.png');\r\n\r\n\r\nfunction WizardIntentDetails(props) {\r\n\r\n    // Popup Config:\r\n    const swalWithBootstrapButtons = Swal.mixin({ customClass: {confirmButton: 'wizard-pages-active-btn-alert'}, buttonsStyling: false });\r\n    \r\n    // New Shit Generic:\r\n    const [GenericResponse,setGenericResponse] = useState('');\r\n    const [GenericTags,setGenericTags] = useState(false);\r\n    const [GenericEmojis,setGenericEmojis] = useState(false);\r\n    const [GenericKeyboard,setGenericKeyboard] = useState(false);\r\n    const [GenericBtnType, setGenericBtnType] = useState('url');\r\n    const [GenericBtnTitle, setGenericBtnTitle] = useState('');\r\n    const [GenericBtnValue, setGenericBtnValue] = useState('');\r\n    const [GenericBtns, setGenericBtns] = useState([]);\r\n    const resetGeneric = () => {\r\n        setGenericResponse('');\r\n        setGenericTags(false);\r\n        setGenericEmojis(false);\r\n        setGenericKeyboard(false);\r\n        setGenericBtnType('url');\r\n        setGenericBtnTitle('');\r\n        setGenericBtnValue('');\r\n        setGenericBtns([]);\r\n    };\r\n    const handleSaveGenericResponse = (intent,wizardIdProject) => {\r\n        let project = {\r\n            genericAnswer : GenericResponse,\r\n            intent: intent,\r\n        };\r\n\r\n        if(GenericResponse === \"\") {\r\n            swalWithBootstrapButtons.fire({\r\n                title: 'Generic Response is empty !',\r\n                confirmButtonText: 'Okay',\r\n            });\r\n        } else if (intentState === 'save' && GenericResponse !== '') {\r\n            setSaveUpdateLoading(true);\r\n\r\n            props.addGenericResponse(project,wizardIdProject)\r\n            .then(() => {\r\n                setIntentState('update');\r\n                setSaveUpdateLoading(false);\r\n            })\r\n            .catch(() => {\r\n                setSaveUpdateLoading(false);\r\n                swalWithBootstrapButtons.fire({\r\n                    title: 'Error while saving the generic response. Try Again !',\r\n                    confirmButtonText: 'Okay',\r\n                });\r\n            });\r\n\r\n        } else if (intentState === 'update' && GenericResponse !== '') {\r\n            setSaveUpdateLoading(true);\r\n\r\n            props.updateGenericResponse(project,wizardIdProject)\r\n            .then(() => {\r\n                setSaveUpdateLoading(false);\r\n            })\r\n            .catch(() => {\r\n                setSaveUpdateLoading(false);\r\n                swalWithBootstrapButtons.fire({\r\n                    title: 'Error while updating the generic response. Try Again !',\r\n                    confirmButtonText: 'Okay',\r\n                });\r\n            });\r\n        }\r\n        \r\n    };\r\n\r\n    // New Shit Specific:\r\n    const [SpecificResponse, SetSpecificResponse] = useState('');\r\n    const [SpecificKeyBoard, setSpecificKeyBoard] = useState(false);\r\n    const [SpecificEmoji, setSpecificEmoji] = useState(false);\r\n    const [SpecificTags, setSpecificTags] = useState(false);\r\n    const [SpecificBtnType, setSpecificType] = useState('url');\r\n    const [SpecificBtnTitle, setSpecificTitle] = useState('');\r\n    const [SpecificBtnValue, setSpecificValue] = useState('');\r\n    const [SpecificBtns, setSpecificBtns] = useState([]);\r\n    const resetSpecific = () => {\r\n        SetSpecificResponse('');\r\n        setSpecificTags(false);\r\n        setSpecificEmoji(false);\r\n        setSpecificKeyBoard(false);\r\n        setSpecificType('url');\r\n        setSpecificTitle('');\r\n        setSpecificValue('');\r\n        setSpecificBtns([]);\r\n    };\r\n\r\n\r\n    // Products\r\n    const [productName, setProductName] = useState('');\r\n    const [savedProductToSend, setSavedProductToSend] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n\r\n    // Categories\r\n    const [newCategory, setNewCategory] = useState('');\r\n    const [categorySelected, setCategorySelected] = useState('');\r\n    const [allCategories, setAllCategories] = useState([]);\r\n    const [CategorieModal, setCategoryModal] = useState(false);\r\n    const [showModalInput, setShowModalInput] = useState(false);\r\n\r\n    // New Shit other:\r\n    const [saveUpdateLoading,setSaveUpdateLoading] = useState(false);\r\n    const [intentState, setIntentState] = useState('save');\r\n    \r\n    \r\n\r\n    const [SpecificPopover, setSpecificPopover] = useState(false);\r\n    const [SpecificTarget, setSpecificTarget] = useState(null);\r\n    const SpecificRef = useRef(null);\r\n\r\n    /* FUNCTIONS */\r\n    \r\n\r\n    const handleCategoriesModal = () => {\r\n        setSpecificPopover(false);\r\n        setCategoryModal(!CategorieModal);\r\n    };\r\n\r\n    const handleSpecificPopover = (event) => {\r\n        setSpecificPopover(!SpecificPopover);\r\n        setSpecificTarget(event.target);\r\n    };\r\n\r\n    // Categories & Products\r\n    const addNewProduct = (idProjet) => {\r\n        \r\n        // First update api : entity === categorie :\r\n        let productToSend = {\r\n            idPage: props.wizardSelectedPage.id,\r\n            typePage : props.wizardSelectedPage.platform,\r\n            entity: productName,\r\n            intent: props.intent,\r\n            genericAnswer: GenericResponse,\r\n            specificAnswer: SpecificResponse,\r\n            categorie: productName,\r\n            buttons: SpecificBtns,\r\n        };\r\n\r\n        axios.put(`${host}/api/v1/secure/project/firstupdate/${idProjet}`, productToSend, {\r\n            headers: {\r\n                'authorization': 'Bearer ' + localStorage.getItem('authtoken')\r\n            }\r\n        })\r\n        .then( res => {\r\n            console.log('first update response =>', res.data.data);\r\n\r\n            if (res.data.data === \"not exist\") {\r\n                // Call the categories api :\r\n                axios.get(`${host}/api/v1/secure/project/get/entitiesproject/${props.wizardSelectedPage.platform}/${props.wizardSelectedPage.id}`)\r\n                .then((res) => {\r\n                    console.log(\"get categories for modal /get/entitiesproject =>\", res.data.data);\r\n                    setAllCategories(res.data.data);\r\n                    SpecificPopover(!SpecificPopover);\r\n                    setSavedProductToSend(productToSend);\r\n                    CategorieModal(true);\r\n                })\r\n                .catch((err) => console.log(\"addNewProduct WizardIntentDetails =>\", err))\r\n            } else {\r\n                setProducts(products => [...products, productToSend ]);\r\n                // Reset\r\n                SpecificPopover(!SpecificPopover);\r\n                setProductName('');\r\n                SetSpecificResponse('');\r\n            };\r\n        })\r\n        .catch( err => console.log(\"Wizard Intent Detail addNewProduct fct first Update API err ===>\", err))\r\n    };\r\n\r\n    const addNewProductViaModal = (idProjet) => {\r\n        // Send the update with the new category name :) :\r\n        let productToSend = savedProductToSend;\r\n        productToSend.categorie = categorySelected;\r\n\r\n        console.log(\"Category Selected To sennnnd\", categorySelected,\" and product =>>>\", productToSend);\r\n        \r\n        return axios.put(host + `/api/v1/secure/project/update/${idProjet}`,productToSend, {\r\n            headers: {\r\n                'authorization': 'Bearer ' + localStorage.getItem('authtoken')\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log('UPDATE API response =>', res.data);\r\n       \r\n            // set the products from => { res.data.data.entities.children }\r\n            setProducts(products => [...products, savedProductToSend ]);\r\n            // setProducts(res.data.data.entities.children);\r\n            // // Reset\r\n            setProductName('');\r\n            SetSpecificResponse('');\r\n            setCategorySelected('');\r\n            CategorieModal(false);\r\n        })\r\n        .catch((err) => console.log(\"addNewProductViaModal => api update err =>> \", err))\r\n    };\r\n\r\n    const deleteProduct = (product,index) => {\r\n        let oldProducts = [...products];\r\n\r\n        console.log(\"To delete with\",index , \" \", product);\r\n        \r\n        // oldProducts.splice(index,1);\r\n        // setProducts(oldProducts);    \r\n    };\r\n\r\n    const pushNewCategory = () => {  \r\n        \r\n        let categoryToPush = {\r\n            name : newCategory\r\n        };\r\n\r\n        setAllCategories(categories => [...categories, categoryToPush]);\r\n        setCategorySelected(categoryToPush.name);\r\n        setShowModalInput(false); \r\n        setNewCategory('');\r\n    };\r\n\r\n    const addNewQuickReply = (quickRep) => {\r\n        // let oldQuickReplies = [...quickReplies]\r\n        \r\n        // let quickReplyToPush = {\r\n        //     type: quickReplyType,\r\n        //     title: quickReplyTitle,\r\n        //     value: quickReplyValue,\r\n        // };\r\n        // oldQuickReplies.push(quickReplyToPush);\r\n\r\n        // // reset\r\n        // setQuickReplyType('url');\r\n        // setQuickReplyTitle('');\r\n        // setQuickReplyValue('');\r\n        \r\n        // // update new Btns :\r\n        // setQuickReplies(oldQuickReplies);\r\n        \r\n        // setShowButtonsModal(false); \r\n        // SpecificPopover(true);\r\n    };\r\n\r\n    const deleteQuickReply = (index) => {\r\n        // let oldQuickReplies = [...quickReplies];\r\n        // oldQuickReplies.splice(index,1);\r\n        // setQuickReplies(oldQuickReplies); \r\n    };\r\n\r\n\r\n    return (\r\n        <Col lg={5} className=\"mb-3 mr-3\" key={props.intent.id}>\r\n            \r\n            <div className=\"d-flex flex-column wizard-config-intents-container\" style={{borderRadius: '0.5rem'}}>\r\n                \r\n                {/* Header */}\r\n                <Row>\r\n                    <Col lg={12}>\r\n                        <Row className=\"justify-content-between mx-0 p-0 wizard-config-intents-top-row\">\r\n                            <div className=\"d-flex\">\r\n                                <p className=\"my-auto wizard-config-intent-title p-2\">{props.intent}</p> \r\n                            </div>\r\n\r\n                            <div className=\"d-flex mr-1\">\r\n                                <FaTrashAlt  color={\"#818E94\"} size={18} className=\"m-auto\" style={{cursor: 'pointer'}} onClick={ () => props.stateManagment(props.selectedIntents.filter( intent =>(intent !== props.intent ))) } />\r\n                                <IoIosArrowDown color={\"#818E94\"} size={18} className=\"my-auto ml-1\" style={{cursor: 'pointer'}} />\r\n                            </div>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <div className=\"mb-2\">\r\n                  <WizardMiracleInput  \r\n                    label={\"Generic Response\"}\r\n                    response={GenericResponse} handleResponse={setGenericResponse}\r\n                    showTags={GenericTags} handleTags={setGenericTags}\r\n                    showEmojis={GenericEmojis} handleEmojis={setGenericEmojis}\r\n                    showKeyboard={GenericKeyboard} handleKeyboard={setGenericKeyboard}\r\n                    BtnType={GenericBtnType} handleBtnType={setGenericBtnType}\r\n                    BtnTitle={GenericBtnTitle} handleBtnTitle={setGenericBtnTitle}\r\n                    BtnValue={GenericBtnValue} handleBtnValue={setGenericBtnValue}\r\n                    Btns={GenericBtns} handleBtns={setGenericBtns}\r\n                    reset={resetGeneric}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                    {/* Save Update Button */}\r\n                    <div className=\"d-flex\">\r\n                        {\r\n                            intentState === 'save' \r\n                            ?\r\n                            (\r\n                                !saveUpdateLoading \r\n                                ?\r\n                                <div onClick={() => handleSaveGenericResponse(props.intent,props.wizardIdProject)} className=\"ml-auto mr-2 mb-2 py-2 px-3 wizard-config-update-btn\">\r\n                                    Save\r\n                                </div>\r\n                                :\r\n                                <div className=\"d-flex ml-auto mr-2 mb-2 py-2 px-4 wizard-config-update-btn\">\r\n                                    <Spinner animation=\"grow\" size=\"sm\" variant=\"light\" className=\"m-auto\" />\r\n                                </div>\r\n                            )\r\n                            :\r\n                            (\r\n                                !saveUpdateLoading \r\n                                ?\r\n                                <div onClick={() => handleSaveGenericResponse(props.intent,props.wizardIdProject)} className=\"ml-auto mr-2 mb-2 py-2 px-3 wizard-config-update-btn\">\r\n                                    Update\r\n                                </div>\r\n                                :\r\n                                <div className=\"d-flex ml-auto mr-2 mb-2 py-2 px-4 wizard-config-update-btn\">\r\n                                    <Spinner animation=\"grow\" size=\"sm\" variant=\"light\" className=\"m-auto\" />\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                    {/* PRODUCTS */}\r\n                    {intentState === 'update' \r\n                    &&\r\n                    <Col lg={11} className=\"mx-auto mt-1\">\r\n                        <Row className=\"justify-content-between\">\r\n                            {\r\n                                products.length > 0 &&\r\n                                products.map((product,index) => \r\n                                    <Col key={index} lg={5} className=\"d-flex flex-row mb-3 py-2 wizard-config-product-box\">\r\n                                        {\r\n                                            product.entity.length > 8\r\n                                            ?\r\n                                            <p data-for='entityTip' data-tip={product.entity} className=\"m-auto wizard-config-product-name\">{product.entity.substring(0,7)}...</p>\r\n                                            :\r\n                                            <p className=\"m-auto wizard-config-product-name\">{product.entity}</p>\r\n                                        }\r\n                                        <AiOutlineCloseCircle className=\"my-auto ml-1\" color={\"#F49BCC\"} size={\"20\"} style={{cursor: 'pointer'}} onClick={() => deleteProduct(product,index)} />\r\n                                        <ReactTooltip id='entityTip' textColor='#fff' backgroundColor='#E5007D' />\r\n                                    </Col> \r\n                                )\r\n                            }    \r\n                            \r\n                            <Col lg={5} onClick={handleSpecificPopover} className=\"wizard-config-add-product-box mb-3 py-2 px-3\" style={{cursor: 'pointer'}}>\r\n                                <Row className=\"d-flex justify-content-around\">\r\n                                    <MdAddCircleOutline className=\"my-auto mr-2\" color={\"#4080FC\"} size={20} />\r\n                                    <p className=\"wizard-config-add-product-name my-auto\">Add product</p>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    }\r\n                </div>\r\n            </div>\r\n             \r\n            {/* Specific Response Popover */}\r\n            <div ref={SpecificRef}>\r\n                <Overlay\r\n                    show={SpecificPopover}\r\n                    target={SpecificTarget}\r\n                    container={SpecificRef.current}\r\n                    placement=\"top-right\"\r\n\r\n                >\r\n                    <Popover id=\"popover-specific\"> \r\n                        <Popover.Content>\r\n                            <div className=\"d-flex\">\r\n                                <IoIosClose className=\"ml-auto\" color={'#9F9F9F'} size={'25'} onClick={handleSpecificPopover} style={{cursor: 'pointer'}} />\r\n                            </div>\r\n                            <div className=\"m-2\">\r\n                                <label className=\"wizard-config-textarea-label\">Product name</label>\r\n                                <input onChange={(e) => setProductName(e.target.value)} value={productName} className=\"wizard-config-textarea\" />\r\n                            </div>\r\n\r\n                            <div className=\"mb-2\">\r\n                                <WizardMiracleInput  \r\n                                    label={\"Specific Response\"}\r\n                                    response={SpecificResponse} handleResponse={SetSpecificResponse}\r\n                                    showTags={SpecificTags} handleTags={setSpecificTags}\r\n                                    showEmojis={SpecificEmoji} handleEmojis={setSpecificEmoji}\r\n                                    showKeyboard={SpecificKeyBoard} handleKeyboard={setSpecificKeyBoard}\r\n                                    BtnType={SpecificBtnType} handleBtnType={setSpecificType}\r\n                                    BtnTitle={SpecificBtnTitle} handleBtnTitle={setSpecificTitle}\r\n                                    BtnValue={SpecificBtnValue} handleBtnValue={setSpecificValue}\r\n                                    Btns={SpecificBtns} handleBtns={setSpecificBtns}\r\n                                    reset={resetSpecific}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"mr-2 ml-2 mt-2 mb-2 d-flex\">\r\n                                <div className=\"ml-auto mb-2 py-3 px-3 wizard-config-update-btn\" onClick={() => addNewProduct(props.wizardIdProject)}>Add</div>\r\n                            </div>\r\n                        </Popover.Content>\r\n                    </Popover>\r\n                </Overlay>\r\n            </div>\r\n            \r\n            \r\n            {/* Categories Modal */}\r\n            <Modal show={CategorieModal} onHide={handleCategoriesModal} centered>\r\n                <Modal.Body>          \r\n                    <Row className=\"d-flex mb-3\">\r\n                        <IoIosClose className=\"ml-auto mr-3\" color={'#9F9F9F'} size={'28'} onClick={handleCategoriesModal} style={{cursor: 'pointer'}} />\r\n                    </Row>\r\n\r\n                    <Row className=\"d-flex mb-3\">\r\n                        <p className=\"m-auto wizard-config-intent-title\">Please specify the category</p>\r\n                    </Row>\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Col lg={1} />\r\n\r\n                        <Col lg={10} className=\"d-flex justify-content-between p-0 mx-0\">\r\n                            <Col lg={8} className=\"d-flex\">\r\n                                {showModalInput && \r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className=\"mr-auto w-100 my-auto add-new-category-input-container\" \r\n                                        onChange={(e) => setNewCategory(e.target.value)}\r\n                                        value={newCategory}\r\n                                        // onKeyDown={(e) => e.key === 'Enter' && pushNewCategory()}\r\n                                    />\r\n                                }\r\n                            </Col>\r\n\r\n                            <Col lg={4} className=\"d-flex\">\r\n                                {!showModalInput\r\n                                &&\r\n                                <p className=\"ml-auto my-auto wizard-config-intent-name\" style={{cursor: 'pointer'}} onClick={() => setShowModalInput(true)}>\r\n                                    create new\r\n                                </p>\r\n                                }\r\n                            </Col>\r\n                        </Col>\r\n\r\n                        <Col lg={1} />\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col lg={1} />\r\n\r\n                        <Col lg={10}>\r\n                            <Form.Group className=\"d-flex w-100\">\r\n                                <Form.Control \r\n                                    className=\"wizard-config-intent-title\" \r\n                                    as=\"select\" \r\n                                    disabled={showModalInput || allCategories.length === 0} \r\n                                    onChange={(e) => setCategorySelected(e.target.value)}\r\n                                    value={categorySelected} \r\n                                    custom\r\n                                >\r\n                                    <option className=\"wizard-config-intent-title\">Choose Category...</option>\r\n                                    {allCategories.length > 0 \r\n                                    && \r\n                                    allCategories.map((category,index) => \r\n                                        <option key={index} className=\"wizard-config-intent-title\" value={category.name}>{category.name}</option>\r\n                                    )}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col lg={1} /> \r\n                    </Row>\r\n                    \r\n                    <Row className=\"mb-3\">\r\n                        {showModalInput\r\n                        ?\r\n                        <div \r\n                            className=\"m-auto mb-2 py-3 px-4 wizard-config-update-btn\" \r\n                            style={{backgroundColor: '#009EE3', cursor:'pointer' }} \r\n                            onClick={() => pushNewCategory()}\r\n                        >\r\n                        Create\r\n                        </div>\r\n                        :\r\n                        <div \r\n                        className=\"m-auto mb-2 py-3 px-4 wizard-config-update-btn\" \r\n                        style={{backgroundColor: allCategories.length > 0 && categorySelected ? '#009EE3' : '#707070', cursor: allCategories.length > 0 && categorySelected ? 'pointer' : 'not-allowed', }} \r\n                        onClick={() => allCategories.length > 0 && categorySelected ? addNewProductViaModal(props.wizardIdProject) : null}\r\n                        >\r\n                        Add\r\n                        </div>\r\n                        }\r\n                        {/* <div \r\n                            className=\"m-auto mb-2 py-3 px-4 wizard-config-update-btn\" \r\n                            style={{backgroundColor: allCategories.length > 0 && categorySelected ? '#009EE3' : '#707070', cursor: allCategories.length > 0 && categorySelected ? 'pointer' : 'not-allowed', }} \r\n                            onClick={() => allCategories.length > 0 && categorySelected ? addNewProductViaModal(props.wizardIdProject) : null}\r\n                        >\r\n                        Add\r\n                        </div> */}\r\n                    </Row>\r\n                </Modal.Body>\r\n            </Modal>\r\n            \r\n        </Col>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    wizardIdProject: state.wizardR.wizardIdProject,\r\n    wizardIntentType: state.wizardR.wizardIntentType,\r\n    wizardSelectedPage: state.wizardR.wizardSelectedPage,\r\n    wizardSelectedPost: state.wizardR.wizardSelectedPost,\r\n    // wizardStep: state.wizardR.wizardStep,\r\n})\r\n\r\nexport default connect(mapStateToProps, { addGenericResponse, updateGenericResponse })(WizardIntentDetails)\r\n\r\n\r\n/**\r\n *\r\n * \r\n * Generic Input\r\n <div className=\"mr-2 ml-2 mt-2 mb-2\">\r\n <label className=\"wizard-config-textarea-label\">Generic Response</label>\r\n <Col lg={12}>\r\n     <Row className=\"d-flex mb-1\">\r\n         <div className=\"d-flex mr-2\">\r\n             <Image src={showGenericTags ? BALISE_ICON_ACTIVE : BALISE_ICON} onClick={handleGenericTagsPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '19px', cursor: 'pointer'}} />    \r\n         </div>                                \r\n\r\n         <div className=\"d-flex mr-2\">\r\n             <Image src={showEmojiPickerGeneric ? EMO_ICON_ACTIVE : EMO_ICON} onClick={handleGenericEmojiPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '18px', cursor: 'pointer'}} />\r\n         </div>\r\n\r\n         <div className=\"d-flex mr-2\">\r\n             <Image src={showKeyBoardGeneric ? LETTER_ICON_ACTIVE : LETTER_ICON} onClick={handleGenericKeyboardPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '21px', cursor: 'pointer'}} />\r\n             \r\n             {showKeyBoardGeneric &&\r\n                 <div className=\"wizard-config-keyboard-container\">\r\n                     <Keyboard onChange={(input) => handleArabicKeyboardChange(input,\"generic\")} onKeyPress={(button) => onKeyPress(button,\"generic\")} layout={layout} />\r\n                 </div>\r\n             }\r\n             {showEmojiPickerGeneric &&\r\n                 <div className=\"wizard-config-emoji-container\" >\r\n                     <Picker onEmojiClick={(e,obj) => onEmojiClick(e,obj,\"generic\")} />\r\n                 </div>\r\n             }\r\n         </div>\r\n     </Row>\r\n </Col>\r\n <textarea onChange={(e) => setGenericResponse(e.target.value)} onFocus={() => console.log(\"Hey I'm Focused\")} value={genericResponse} className=\"wizard-config-textarea\" rows=\"5\"/>\r\n</div>\r\n\r\n\r\n\r\n Generic Tags modal \r\n<Modal show={showGenericTags} size=\"sm\" centered>\r\n<Row className=\"d-flex w-100\">\r\n    <IoIosClose className=\"ml-auto my-auto pt-1\" color={'#9F9F9F'} size={30} onClick={() => setShowGenericTags(false)} style={{cursor: 'pointer'}} />\r\n</Row>\r\n\r\n<Row className=\"d-flex w-100\">\r\n    <h3 className=\"m-auto wizard-config-intent-title\">Choose one tag variable</h3>\r\n</Row>\r\n\r\n<Modal.Body>  \r\n    <Row className=\"d-flex\">\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##FIRST_NAME##',\"generic\")}>First Name</p>\r\n        </Col>\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##LAST_NAME##',\"generic\")}>Last Name</p>\r\n        </Col>\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##FULL_NAME##',\"generic\")}>Full Name</p>\r\n        </Col>\r\n        <Col xs={12} className=\"m-auto d-flex\">\r\n            <p className=\"m-auto wizard-config-tag\" onClick={() => pushSelectedTag('##PAGE_NAME##',\"generic\")}>Page Name</p>\r\n        </Col>\r\n    </Row>\r\n</Modal.Body>\r\n</Modal>\r\n\r\n  FUNCTIONS \r\n    // Generic :\r\n    const handleGenericTagsPopover = (event) => {\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(!showGenericTags);\r\n        setTargetGenericTags(event.target);\r\n\r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n    };\r\n\r\n    const handleGenericKeyboardPopover = () => {\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowGenericTags(false);\r\n        setShowKeyBoardGeneric(!showKeyBoardGeneric);\r\n\r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n    };\r\n\r\n    const handleGenericEmojiPopover = () => {\r\n        setShowGenericTags(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowEmojiPickerGeneric(!showEmojiPickerGeneric);\r\n\r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n    };\r\n\r\n\r\n\r\n     Specific Tags Popover \r\n    <div ref={refSepecificTags}>\r\n    <Overlay\r\n        show={showSpecificTags}\r\n        target={targetSpecificTags}\r\n        placement=\"top\"\r\n        container={refSepecificTags.current}\r\n        containerPadding={20}\r\n    >\r\n        <Row className=\"d-flex\" style={{ width: '200px', height: '200px', background: '#fff', borderRadius: '0.3rem', marginBottom: \"9px\"}}>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">First Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">Last Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">Full Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\">Page Name</p>\r\n            </Col>\r\n        </Row>\r\n    </Overlay>\r\n</div>\r\n\r\n\r\n const handleSpecificKeyboardPopover = () => {\r\n        // Generic\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(false);\r\n        \r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(!showKeyBoard);\r\n    };\r\n\r\n    const handleSpecificEmojiPopover = () => {\r\n        // Generic\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(false);\r\n        \r\n        //Specific\r\n        setShowSpecificTags(false);\r\n        setShowKeyBoard(false);\r\n        setShowEmojiPicker(!showEmojiPicker);\r\n    };\r\n\r\n    const handleSpecificTagsPopover = (event) => {\r\n        // Generic\r\n        setShowEmojiPickerGeneric(false);\r\n        setShowKeyBoardGeneric(false);\r\n        setShowGenericTags(false);\r\n\r\n        // Specific\r\n        setShowEmojiPicker(false);\r\n        setShowKeyBoard(false);\r\n        SpecificPopover(false);\r\n        setShowSpecificTags(true);\r\n\r\n    };\r\n\r\n     const handleArabicKeyboardChange = (input,type) => {\r\n        if(type === \"generic\") {\r\n            let newGenericResponse = `${genericResponse}${input.charAt(input.length - 1)}`;\r\n            setGenericResponse(newGenericResponse);\r\n        } else {\r\n            let newSpecifiResponse = `${SpecificResponse}${input.charAt(input.length - 1)}`;\r\n            SetSpecificResponse(newSpecifiResponse);\r\n        }\r\n    };\r\n    \r\n    const onKeyPress = (button,type) => {\r\n        if(type === \"generic\") {\r\n            if (button.toString() == \"{enter}\") {\r\n                setShowKeyBoardGeneric(false);\r\n            }\r\n        } else {\r\n            if (button.toString() == \"{enter}\") {\r\n                setShowKeyBoard(false);\r\n            }\r\n        }\r\n    };\r\n    \r\n    const onEmojiClick = (event, emojiObject,type) => {\r\n        if(type === \"generic\") {\r\n            let newGenericResponse = `${genericResponse}${emojiObject.emoji}`;\r\n            setGenericResponse(newGenericResponse);\r\n        } else {\r\n            let newSpecifiResponse = `${SpecificResponse}${emojiObject.emoji}`;\r\n            SetSpecificResponse(newSpecifiResponse);\r\n        }\r\n    };\r\n\r\n    const pushSelectedTag = (tag,type) => {\r\n\r\n        if(type === \"generic\") {\r\n            let newGenericResponse = `${genericResponse} ${tag} `;\r\n            setGenericResponse(newGenericResponse);\r\n            setShowGenericTags(false);\r\n        } else {\r\n            let newSpecifiResponse = `${SpecificResponse} ${tag} `;\r\n            SetSpecificResponse(newSpecifiResponse);\r\n            setShowSpecificTags(false);\r\n        }\r\n    };\r\n\r\n\r\n    {/* Specific Tags modal \r\n    <Modal show={showSpecificTags} size=\"sm\" centered>   \r\n    <Row className=\"d-flex w-100\">\r\n        <IoIosClose className=\"ml-auto my-auto pt-1\" color={'#9F9F9F'} size={30} onClick={() => { setShowSpecificTags(false); SpecificPopover(true); }} style={{cursor: 'pointer'}} />\r\n    </Row>\r\n\r\n    <Row className=\"d-flex w-100\">\r\n        <h3 className=\"m-auto wizard-config-intent-title\">Choose one tag variable</h3>\r\n    </Row>\r\n   \r\n    <Modal.Body>  \r\n        <Row className=\"d-flex\">\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##FIRST_NAME##', \"specific\"); setShow(true); }}>First Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##LAST_NAME##', \"specific\"); setShow(true); }}>Last Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##FULL_NAME##', \"specific\"); setShow(true); }}>Full Name</p>\r\n            </Col>\r\n            <Col xs={12} className=\"m-auto d-flex\">\r\n                <p className=\"m-auto wizard-config-tag\" onClick={() => { pushSelectedTag('##PAGE_NAME##', \"specific\"); setShow(true); }}>Page Name</p>\r\n            </Col>\r\n        </Row>\r\n    </Modal.Body>\r\n</Modal>\r\n\r\n{/* Specific Btns (Quicks replies Modal) \r\n<Modal show={showButtonsModal} size=\"sm\" centered>   \r\n    <Modal.Body>  \r\n        <Row className=\"justify-content-center\">\r\n            <Col md={12}>\r\n                <Row>\r\n                    <Col md={12} className=\"mt-2 mb-3\">\r\n                        <Form.Control as=\"select\" onChange={(e) => setQuickReplyType(e.target.value)} defaultValue=\"url\">\r\n                            <option value=\"url\">Url</option>\r\n                            <option value=\"call\">Call</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                    \r\n                    <Col md={12} className=\"mt-2\">\r\n                        <Row className=\"d-flex\">\r\n                            <Col md={12}>\r\n                                <Form.Control type={\"text\"} onChange={(e) => setQuickReplyTitle(e.target.value)} value={quickReplyTitle}  placeholder=\"Title\" />\r\n                            </Col>\r\n\r\n                            <Col md={12} className=\"d-flex\">\r\n                                <p className=\"ml-auto wizard-config-input-feedback\">Remaining characters: 20</p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    <Col md={12} className=\"mb-2\">\r\n                        <Form.Control type={quickReplyType === \"url\" ? \"text\" : \"number\"} onChange={(e) => setQuickReplyValue(e.target.value)} value={quickReplyValue}  placeholder={quickReplyType === \"url\" ? \"www.example.com\" : \"(+216) 99 999 999\"}  />\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n\r\n            <Col md={11} className=\"d-flex pl-1\">\r\n                <div className=\"wizard-pages-active-btn py-3 px-5\" onClick={() => addNewQuickReply()}>\r\n                    OK\r\n                </div>\r\n            </Col>\r\n           \r\n        </Row>\r\n    </Modal.Body>\r\n</Modal>\r\n\r\n\r\n\r\n <div className=\"m-2\">\r\n    <label className=\"wizard-config-textarea-label\">Specific response</label>\r\n    <Row>\r\n            <Col lg={12}>\r\n            <Row className=\"d-flex mb-1 ml-2\">\r\n                <div className=\"d-flex mr-2\">\r\n                    <Image src={showSpecificTags ? BALISE_ICON_ACTIVE : BALISE_ICON} onClick={handleSpecificTagsPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '19px', cursor: 'pointer'}} />    \r\n                </div>                                \r\n\r\n                <div className=\"d-flex mr-2\">\r\n                    <Image src={showEmojiPicker ? EMO_ICON_ACTIVE : EMO_ICON} onClick={handleSpecificEmojiPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '18px', cursor: 'pointer'}} />\r\n                </div>\r\n\r\n                <div className=\"d-flex mr-2\">\r\n                    <Image src={showKeyBoard ? LETTER_ICON_ACTIVE : LETTER_ICON} onClick={handleSpecificKeyboardPopover} className=\"m-auto my-agents-msgs-tiny-icon\" style={{ width: '21px', cursor: 'pointer'}} />\r\n                    \r\n                    {showKeyBoard &&\r\n                        <div className=\"wizard-config-keyboard-container\">\r\n                            <Keyboard onChange={handleArabicKeyboardChange} onKeyPress={onKeyPress} layout={layout} />\r\n                        </div>\r\n                    }\r\n                    {showEmojiPicker &&\r\n                        <div className=\"wizard-config-emoji-container\" >\r\n                            <Picker onEmojiClick={onEmojiClick} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </Row>\r\n        </Col> \r\n\r\n        <Col lg={12} className=\"mb-2\">\r\n        <textarea onChange={(e) => setSpecificResponse(e.target.value)} value={SpecificResponse} className=\"wizard-config-textarea\" rows=\"5\"/>\r\n        <hr style={{borderColor: '#B4B4B4', borderWidth: '1.5px'}}/>\r\n    </Col> \r\n    \r\n        Quick replies \r\n        <Col lg={12} className=\"d-flex flex-row mb-2\">\r\n    \r\n        {quickReplies.map((quickReply,index) => \r\n            <Col key={index} lg={3} className=\"mr-2\">\r\n                <Row className=\"wizard-config-quick-replies-btn py-1\">\r\n                    <p className=\"m-auto\" data-for='quickReplyTip' data-tip={quickReply.value}>{quickReply.type}</p>\r\n                    <AiOutlineCloseCircle className=\"m-auto\" color={\"white\"} size={\"17\"} style={{cursor: 'pointer'}} onClick={() => deleteQuickReply(index)} />\r\n                </Row>\r\n                <ReactTooltip id='quickReplyTip' textColor='#fff' backgroundColor='#009EE3' />\r\n            </Col>\r\n        )}\r\n\r\n        // ADD BUTTON\r\n        {quickReplies.length < 3\r\n        &&\r\n        <Col lg={3}>\r\n            <Row \r\n                className=\"wizard-config-quick-replies-btn py-1\" \r\n                \r\n                onClick={() =>{ setShowButtonsModal(true); setShow(false); }}\r\n            >\r\n                <p className=\"m-auto\">Add button</p>\r\n            </Row>\r\n        </Col>\r\n        }\r\n\r\n    </Col>\r\n</Row>\r\n</div>\r\n\r\n */"]},"metadata":{},"sourceType":"module"}