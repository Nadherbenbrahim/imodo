{"ast":null,"code":"// import {createStore , applyMiddleware} from 'redux';\n// import thunk from 'redux-thunk';\n// import rootReducer from '../reducers';\n// const initialState = {};\n// const middleware = [thunk];\n// const store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\n// export default store;\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers'; // LOAD & GET LOCALSTORAGE STATE:\n\nfunction saveToLocalStorage(state) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    console.log(\"Saving state to localStorage error\", e);\n  }\n}\n\n;\n\nfunction loadFromLocalStorage(state) {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.log(\"Loading state to localStorage error\", e);\n    return undefined;\n  }\n}\n\n;\nconst middleware = [thunk];\nconst persistedState = loadFromLocalStorage();\nconst store = createStore(rootReducer, persistedState, applyMiddleware(...middleware));\nstore.subscribe(() => saveToLocalStorage(store.getState()));\nexport default store;","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/redux/store/index.js"],"names":["createStore","applyMiddleware","thunk","rootReducer","saveToLocalStorage","state","serializedState","JSON","stringify","localStorage","setItem","e","console","log","loadFromLocalStorage","getItem","undefined","parse","middleware","persistedState","store","subscribe","getState"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA,SAAQA,WAAR,EAAsBC,eAAtB,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB,C,CAEA;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,MAAI;AACA,UAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,eAA9B;AACH,GAHD,CAIA,OAAMK,CAAN,EAAS;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAiDF,CAAjD;AACH;AACJ;;AAAA;;AAED,SAASG,oBAAT,CAA8BT,KAA9B,EAAqC;AACjC,MAAI;AACA,UAAMC,eAAe,GAAGG,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAxB;AACA,QAAGT,eAAe,KAAK,IAAvB,EAA6B,OAAOU,SAAP;AAC7B,WAAOT,IAAI,CAACU,KAAL,CAAWX,eAAX,CAAP;AAEH,GALD,CAMA,OAAMK,CAAN,EAAS;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAkDF,CAAlD;AACA,WAAOK,SAAP;AACH;AACJ;;AAAA;AAED,MAAME,UAAU,GAAG,CAAChB,KAAD,CAAnB;AAEA,MAAMiB,cAAc,GAAGL,oBAAoB,EAA3C;AAEA,MAAMM,KAAK,GAAGpB,WAAW,CAACG,WAAD,EAAagB,cAAb,EAA4BlB,eAAe,CAAC,GAAGiB,UAAJ,CAA3C,CAAzB;AAEAE,KAAK,CAACC,SAAN,CAAgB,MAAMjB,kBAAkB,CAACgB,KAAK,CAACE,QAAN,EAAD,CAAxC;AAEA,eAAeF,KAAf","sourcesContent":["// import {createStore , applyMiddleware} from 'redux';\r\n// import thunk from 'redux-thunk';\r\n// import rootReducer from '../reducers';\r\n\r\n// const initialState = {};\r\n\r\n// const middleware = [thunk];\r\n\r\n// const store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\r\n\r\n// export default store;\r\n\r\n\r\nimport {createStore , applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\n// LOAD & GET LOCALSTORAGE STATE:\r\n\r\nfunction saveToLocalStorage(state) {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    }\r\n    catch(e) {\r\n        console.log(\"Saving state to localStorage error\",e);\r\n    }\r\n};\r\n\r\nfunction loadFromLocalStorage(state) {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if(serializedState === null) return undefined;\r\n        return JSON.parse(serializedState);\r\n        \r\n    }\r\n    catch(e) {\r\n        console.log(\"Loading state to localStorage error\",e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nconst store = createStore(rootReducer,persistedState,applyMiddleware(...middleware));\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}