{"ast":null,"code":"var _jsxFileName = \"/usr/work/smart_front_oussema/src/components/CommentsMatch.js\";\nimport React from 'react';\nimport Comment from './Comment';\n\nfunction CommentsMatch(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      marginBottom: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      cursor: 'pointer',\n      background: \"#E5007D\",\n      width: \"42%\",\n      padding: 10,\n      color: \"#fff\",\n      display: \"inline-block\",\n      textAlign: \"center\",\n      fontSize: 13,\n      margin: 0,\n      fontFamily: \"Poppins\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Matched\"), React.createElement(\"span\", {\n    style: {\n      cursor: 'pointer',\n      background: \"#E9E9EB\",\n      width: \"42%\",\n      padding: 10,\n      color: \"#818E94\",\n      display: \"inline-block\",\n      textAlign: \"center\",\n      fontSize: 13,\n      margin: 0,\n      fontFamily: \"Poppins\"\n    },\n    onClick: () => props.setshow(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Not matched\")), React.createElement(\"div\", {\n    style: {\n      height: 420,\n      overflowY: \"scroll\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, props.comments.length > 0 && props.comments[0].events.map(el => el.success && React.createElement(Comment, {\n    comment: el,\n    key: el._id,\n    bg: props.eventVal && props.eventVal._id === el._id ? \"#F2F2F2\" : \"#FFF\",\n    handelClick: props.handelClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }))));\n}\n\nexport default CommentsMatch;","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/components/CommentsMatch.js"],"names":["React","Comment","CommentsMatch","props","marginBottom","cursor","background","width","padding","color","display","textAlign","fontSize","margin","fontFamily","setshow","height","overflowY","comments","length","events","map","el","success","_id","eventVal","handelClick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,KAAK,EAAE;AACTC,MAAAA,MAAM,EAAE,SADC;AACUC,MAAAA,UAAU,EAAE,SADtB;AACiCC,MAAAA,KAAK,EAAE,KADxC;AAC+CC,MAAAA,OAAO,EAAE,EADxD;AAC4DC,MAAAA,KAAK,EAAE,MADnE;AAC2EC,MAAAA,OAAO,EAAE,cADpF;AACoGC,MAAAA,SAAS,EAAE,QAD/G;AACyHC,MAAAA,QAAQ,EAAE,EADnI;AACuIC,MAAAA,MAAM,EAAE,CAD/I;AACkJC,MAAAA,UAAU,EAAE;AAD9J,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAII;AAAM,IAAA,KAAK,EAAE;AAAET,MAAAA,MAAM,EAAE,SAAV;AAAqBC,MAAAA,UAAU,EAAE,SAAjC;AAA4CC,MAAAA,KAAK,EAAE,KAAnD;AAA0DC,MAAAA,OAAO,EAAE,EAAnE;AAAuEC,MAAAA,KAAK,EAAE,SAA9E;AAAyFC,MAAAA,OAAO,EAAE,cAAlG;AAAkHC,MAAAA,SAAS,EAAE,QAA7H;AAAuIC,MAAAA,QAAQ,EAAE,EAAjJ;AAAqJC,MAAAA,MAAM,EAAE,CAA7J;AAAgKC,MAAAA,UAAU,EAAE;AAA5K,KAAb;AAAsM,IAAA,OAAO,EAAE,MAAMX,KAAK,CAACY,OAAN,CAAc,KAAd,CAArN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJJ,CADJ,EAOI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQd,KAAK,CAACe,QAAN,CAAeC,MAAf,GAAwB,CAAxB,IAA6BhB,KAAK,CAACe,QAAN,CAAe,CAAf,EAAkBE,MAAlB,CAAyBC,GAAzB,CAA6BC,EAAE,IAAKA,EAAE,CAACC,OAAH,IAAc,oBAAE,OAAF;AAAU,IAAA,OAAO,EAAED,EAAnB;AAAuB,IAAA,GAAG,EAAEA,EAAE,CAACE,GAA/B;AAAoC,IAAA,EAAE,EAAErB,KAAK,CAACsB,QAAN,IAAkBtB,KAAK,CAACsB,QAAN,CAAeD,GAAf,KAAuBF,EAAE,CAACE,GAA5C,GAAkD,SAAlD,GAA8D,MAAtG;AAA8G,IAAA,WAAW,EAAErB,KAAK,CAACuB,WAAjI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlD,CAFrC,CAPJ,CADJ;AAeH;;AAED,eAAexB,aAAf","sourcesContent":["import React from 'react'\r\nimport Comment from './Comment'\r\n\r\nfunction CommentsMatch(props) {\r\n    return (\r\n        <div>\r\n            <div style={{ marginBottom: 30 }}>\r\n                <span style={{\r\n                    cursor: 'pointer', background: \"#E5007D\", width: \"42%\", padding: 10, color: \"#fff\", display: \"inline-block\", textAlign: \"center\", fontSize: 13, margin: 0, fontFamily: \"Poppins\"\r\n                }}>Matched</span>\r\n                <span style={{ cursor: 'pointer', background: \"#E9E9EB\", width: \"42%\", padding: 10, color: \"#818E94\", display: \"inline-block\", textAlign: \"center\", fontSize: 13, margin: 0, fontFamily: \"Poppins\" }} onClick={() => props.setshow(false)}>Not matched</span>\r\n            </div>\r\n            <div style={{ height: 420, overflowY: \"scroll\" }}>\r\n                {\r\n                    props.comments.length > 0 && props.comments[0].events.map(el => (el.success && < Comment comment={el} key={el._id} bg={props.eventVal && props.eventVal._id === el._id ? \"#F2F2F2\" : \"#FFF\"} handelClick={props.handelClick} />))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentsMatch\r\n"]},"metadata":{},"sourceType":"module"}