{"ast":null,"code":"var _jsxFileName = \"/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { nextWizardStep, getExistingProject, getAllIntents, trainAgentPage, trainAgentPost, resetStep3Wizard, nextSpecificWizardStep, resetWizardPostSelected, resetWizardPageSelected } from '../../../redux/actions/wizardActions';\nimport Swal from 'sweetalert2/dist/sweetalert2.js'; // import ReactTooltip from 'react-tooltip';\n\nimport WizardIntentDetails from './WizardIntentDetails';\nimport { Row, Col, Spinner, Modal } from 'react-bootstrap';\nimport { useLocation, useHistory } from 'react-router-dom'; // Translations\n\nimport { trans } from '../../../Translations';\nimport { BiError } from 'react-icons/bi';\nexport const WizardConfig = props => {\n  let {\n    lang\n  } = props; // Popup Config :\n\n  const swalWithBootstrapButtons = Swal.mixin({\n    customClass: {\n      confirmButton: 'wizard-pages-active-btn py-2 px-3'\n    },\n    buttonsStyling: false\n  });\n  const [selectedIntents, setSelectedIntents] = useState([]);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [notif, setNotif] = useState(false);\n  let location = useLocation();\n  let history = useHistory();\n\n  const checkIntent = intent => {\n    let found = selectedIntents.findIndex(intenta => intenta.name === intent);\n\n    if (found > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const newIntent = intent => {\n    let found = selectedIntents.findIndex(intenta => intenta.name === intent); // if already clicked swal the popup\n\n    if (found > -1) {\n      swalWithBootstrapButtons.fire({\n        title: `${trans[lang].wizardConfig.intent} \"${intent}\" ${trans[lang].wizardConfig.alreadySelected}`,\n        confirmButtonText: 'Okay'\n      });\n    } else {\n      // Intent selected and create an array for the products to render it from the backend\n      let intentToPush = {\n        name: intent,\n        products: [],\n        status: 'new'\n      }; // console.log(\"Im pushing\", intentToPush)\n\n      setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush]);\n    }\n  };\n\n  const goToTrainAgent = () => {\n    if (selectedIntents.length > 0) {\n      setBtnLoading(true);\n      setNotif(true);\n\n      if (props.wizardIntentType === \"generic\") {\n        props.trainAgentPage(selectedIntents, props.wizardIdProject).then(() => {\n          setNotif(false);\n          props.nextWizardStep();\n        }).then(() => props.resetStep3Wizard());\n      } else {\n        props.trainAgentPost(selectedIntents, props.wizardIdProject).then(() => {\n          setNotif(true);\n          props.nextWizardStep();\n        }).then(() => props.resetStep3Wizard());\n      }\n    } else {\n      swalWithBootstrapButtons.fire({\n        title: trans[lang].wizardConfig.addAtLeast,\n        confirmButtonText: 'Okay'\n      });\n    }\n  };\n\n  const handleBackFromStep3To2 = () => {\n    props.resetStep3Wizard(); // console.log(\"Lets see location first =>\", location);\n\n    if (location.state) {\n      history.push({\n        pathname: '/home/my-agents',\n        state: {\n          imFrom: 'Wizard'\n        }\n      });\n    } else {\n      if (props.wizardIntentType === \"generic\") {\n        props.resetWizardPageSelected();\n        props.nextSpecificWizardStep(0);\n      } else {\n        props.resetWizardPostSelected();\n        props.nextSpecificWizardStep(1);\n      }\n    }\n  };\n\n  const renderNotif = () => /*#__PURE__*/React.createElement(Modal, {\n    show: notif,\n    size: \"md\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(BiError, {\n    color: \"#E5007D\",\n    size: 65,\n    className: \"mx-auto mb-3\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mx-auto mb-3 confirm-modal-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 29\n    }\n  }, trans[lang].wizardConfig.updateYourAgent)), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    className: \"spinnerRose m-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 28\n    }\n  }))))));\n\n  useEffect(() => {\n    props.getAllIntents(props.wizardIntentType).then(() => {\n      props.getExistingProject(props.wizardIdProject);\n    });\n  }, []);\n  useEffect(() => {\n    if (props.wizardExistingProjectIntents) {\n      // Set selected Intent from the existing project directly :\n      let intentToPush = {}; // let newIntents = [...selectedIntents];\n\n      let newIntents = [];\n      props.wizardExistingProjectIntents.map(intent => {\n        // console.log(\"Existing shit =>\", intent);\n        intentToPush = {\n          name: intent.name,\n          products: intent.answer,\n          status: 'old'\n        };\n        newIntents.push(intentToPush);\n      }); // console.log(\"Final intent =>\", newIntents);\n\n      setSelectedIntents(newIntents);\n    } // To Remove the listner\n\n\n    return () => {};\n  }, [props.wizardExistingProjectIntents]);\n  return /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, notif && renderNotif(), /*#__PURE__*/React.createElement(Col, {\n    lg: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 9,\n    className: \"wizard-pages-container mb-3 py-4 pl-4 pr-5 \",\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex\",\n    style: {\n      width: 'fit-content'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"d-flex flex-column p-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column wizard-config-intents-container px-3 py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mr-auto  mb-3 wizard-config-intent-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 29\n    }\n  }, trans[lang].wizardConfig.selectIntents), /*#__PURE__*/React.createElement(Row, {\n    className: \"mx-0 my-0 d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 29\n    }\n  }, props.wizardIntents && props.wizardIntents.map((intent, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    onClick: () => newIntent(intent),\n    className: checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 px-2 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 px-2 mb-2 mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 37\n    }\n  }, lang === \"en\" ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"m-auto wizard-config-intent-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 41\n    }\n  }, intent) : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"m-auto wizard-config-intent-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 41\n    }\n  }, intent[`_${lang}`]))))))), /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }, selectedIntents && selectedIntents.map((intent, index) => /*#__PURE__*/React.createElement(WizardIntentDetails, {\n    indexOfIntent: index,\n    intent: intent,\n    wizardIdProject: props.wizardIdProject,\n    setIntents: setSelectedIntents,\n    selectedIntents: selectedIntents,\n    isExistingProject: props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false,\n    intentStatus: intent.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 6,\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-inactive-btn py-2 px-4 my-auto text-center\",\n    onClick: handleBackFromStep3To2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }\n  }, trans[lang].wizardConfig.back)), /*#__PURE__*/React.createElement(Col, {\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 33\n    }\n  }, trans[lang].wizardConfig.saveDraft), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wizard-pages-active-btn py-2 px-4 mr-3\",\n    onClick: () => goToTrainAgent(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 33\n    }\n  }, btnLoading ? /*#__PURE__*/React.createElement(Spinner, {\n    size: \"sm\",\n    animation: \"border\",\n    variant: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 38\n    }\n  }) : trans[lang].wizardConfig.next)))))), /*#__PURE__*/React.createElement(Col, {\n    lg: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  lang: state.socialMediaR.lang,\n  wizardStep: state.wizardR.wizardStep,\n  wizardIntentType: state.wizardR.wizardIntentType,\n  wizardIdProject: state.wizardR.wizardIdProject,\n  wizardExistingProject: state.wizardR.wizardExistingProject,\n  wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\n  wizardIntents: state.wizardR.wizardIntents,\n  wizardSelectedPage: state.wizardR.wizardSelectedPage,\n  wizardSelectedPost: state.wizardR.wizardSelectedPost\n});\n\nexport default connect(mapStateToProps, {\n  nextWizardStep,\n  getExistingProject,\n  getAllIntents,\n  trainAgentPage,\n  trainAgentPost,\n  resetStep3Wizard,\n  nextSpecificWizardStep,\n  resetWizardPostSelected,\n  resetWizardPageSelected\n})(WizardConfig);","map":{"version":3,"sources":["/usr/work/smart_front_oussema/src/app/Home/AutoWizard/WizardConfig.js"],"names":["React","useEffect","useState","connect","nextWizardStep","getExistingProject","getAllIntents","trainAgentPage","trainAgentPost","resetStep3Wizard","nextSpecificWizardStep","resetWizardPostSelected","resetWizardPageSelected","Swal","WizardIntentDetails","Row","Col","Spinner","Modal","useLocation","useHistory","trans","BiError","WizardConfig","props","lang","swalWithBootstrapButtons","mixin","customClass","confirmButton","buttonsStyling","selectedIntents","setSelectedIntents","btnLoading","setBtnLoading","notif","setNotif","location","history","checkIntent","intent","found","findIndex","intenta","name","newIntent","fire","title","wizardConfig","alreadySelected","confirmButtonText","intentToPush","products","status","goToTrainAgent","length","wizardIntentType","wizardIdProject","then","addAtLeast","handleBackFromStep3To2","state","push","pathname","imFrom","renderNotif","cursor","updateYourAgent","wizardExistingProjectIntents","newIntents","map","answer","backgroundColor","width","selectIntents","wizardIntents","index","back","saveDraft","next","mapStateToProps","socialMediaR","wizardStep","wizardR","wizardExistingProject","wizardSelectedPage","wizardSelectedPost"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { nextWizardStep,getExistingProject, getAllIntents, trainAgentPage, trainAgentPost, resetStep3Wizard, nextSpecificWizardStep, resetWizardPostSelected,resetWizardPageSelected } from '../../../redux/actions/wizardActions';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nimport WizardIntentDetails from './WizardIntentDetails';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    Modal\r\n} from 'react-bootstrap';\r\n\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n\r\n// Translations\r\nimport { trans } from '../../../Translations';\r\n\r\n\r\nimport { BiError } from 'react-icons/bi';\r\n\r\nexport const WizardConfig = (props) => {\r\n\r\n    let { lang } = props;\r\n\r\n    // Popup Config :\r\n    const swalWithBootstrapButtons = Swal.mixin({\r\n        customClass: {\r\n          confirmButton: 'wizard-pages-active-btn py-2 px-3',\r\n        },\r\n        buttonsStyling: false\r\n    });\r\n\r\n    const [selectedIntents, setSelectedIntents] = useState([]);\r\n    const [btnLoading, setBtnLoading] = useState(false);\r\n    const [notif, setNotif] = useState(false);\r\n\r\n    let location = useLocation();\r\n    let history = useHistory();\r\n\r\n    const checkIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n\r\n        if(found > -1) {\r\n           return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const newIntent = (intent) => {\r\n        let found = selectedIntents.findIndex((intenta) => intenta.name === intent);\r\n        \r\n        // if already clicked swal the popup\r\n        if(found > -1) {    \r\n            swalWithBootstrapButtons.fire({ title: `${trans[lang].wizardConfig.intent} \"${intent}\" ${trans[lang].wizardConfig.alreadySelected}`,confirmButtonText: 'Okay' });\r\n        } else {\r\n            // Intent selected and create an array for the products to render it from the backend\r\n            let intentToPush = {\r\n                name: intent,\r\n                products: [],\r\n                status: 'new',\r\n            };\r\n            // console.log(\"Im pushing\", intentToPush)\r\n            setSelectedIntents(selectedIntents => [...selectedIntents, intentToPush]);\r\n        }\r\n    };\r\n\r\n    const goToTrainAgent = () => {\r\n        \r\n        if(selectedIntents.length > 0) {\r\n            setBtnLoading(true);\r\n            setNotif(true);\r\n\r\n            if(props.wizardIntentType === \"generic\") {\r\n                props.trainAgentPage(selectedIntents,props.wizardIdProject)\r\n                .then(() => { setNotif(false);  props.nextWizardStep(); })\r\n                .then(() => props.resetStep3Wizard());\r\n            } else {\r\n                props.trainAgentPost(selectedIntents,props.wizardIdProject)\r\n                .then(() => { setNotif(true); props.nextWizardStep(); })\r\n                .then(() => props.resetStep3Wizard());\r\n            }\r\n        } else {\r\n            swalWithBootstrapButtons.fire({ title: trans[lang].wizardConfig.addAtLeast, confirmButtonText: 'Okay' });\r\n        }\r\n    };\r\n\r\n    const handleBackFromStep3To2 = () => {\r\n        props.resetStep3Wizard(); \r\n        // console.log(\"Lets see location first =>\", location);\r\n\r\n        if(location.state) {\r\n            history.push({\r\n                pathname: '/home/my-agents',\r\n                state: { imFrom : 'Wizard' }\r\n            });\r\n        } else {\r\n            if(props.wizardIntentType === \"generic\") {\r\n                props.resetWizardPageSelected();\r\n                props.nextSpecificWizardStep(0);\r\n            } else {\r\n                props.resetWizardPostSelected();\r\n                props.nextSpecificWizardStep(1);\r\n                \r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const renderNotif = () => (\r\n        <Modal show={notif} size=\"md\" centered>\r\n            <Modal.Body>\r\n                <Col lg={12}>\r\n                    <Row>\r\n                        <Col lg={12} className=\"d-flex\">\r\n                            <BiError color={\"#E5007D\"} size={65} className=\"mx-auto mb-3\" style={{cursor: 'pointer'}} />\r\n                        </Col>\r\n\r\n                        <Col lg={12} className=\"d-flex\">\r\n                            <p className=\"mx-auto mb-3 confirm-modal-text\">\r\n                               {trans[lang].wizardConfig.updateYourAgent}\r\n                            </p>\r\n                        </Col>\r\n                        \r\n                        <Col lg={12} className=\"d-flex\">\r\n                           <Spinner  animation=\"border\"  className=\"spinnerRose m-auto\" />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Modal.Body>\r\n      </Modal>\r\n    );\r\n\r\n    useEffect(() => {\r\n        props.getAllIntents(props.wizardIntentType)\r\n        .then(() => {\r\n            props.getExistingProject(props.wizardIdProject)\r\n        });\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        if(props.wizardExistingProjectIntents) {\r\n            // Set selected Intent from the existing project directly :\r\n            let intentToPush = {};\r\n            // let newIntents = [...selectedIntents];\r\n            let newIntents = [];\r\n\r\n            props.wizardExistingProjectIntents.map(intent => {\r\n                // console.log(\"Existing shit =>\", intent);\r\n                intentToPush = {\r\n                    name: intent.name,\r\n                    products: intent.answer,\r\n                    status: 'old',\r\n                };\r\n                newIntents.push(intentToPush);\r\n            });\r\n            // console.log(\"Final intent =>\", newIntents);\r\n            setSelectedIntents(newIntents);\r\n        }\r\n        // To Remove the listner\r\n        return () => {};\r\n    },[props.wizardExistingProjectIntents]);\r\n\r\n    return (\r\n        <Row className=\"mt-1\">  \r\n            {notif && renderNotif()}\r\n\r\n            <Col lg={1} />\r\n    \r\n            <Col lg={9} className=\"wizard-pages-container mb-3 py-4 pl-4 pr-5 \" style={{backgroundColor: 'white'}}>\r\n                \r\n                {/* INTENTS */}\r\n                <Row className=\"d-flex\" style={{width: 'fit-content'}}>\r\n                    <Col lg={12} className=\"d-flex flex-column p-3\">\r\n                        <div className=\"d-flex flex-column wizard-config-intents-container px-3 py-2\">\r\n                            <p className=\"mr-auto  mb-3 wizard-config-intent-title\">{trans[lang].wizardConfig.selectIntents}</p>\r\n                            \r\n                            <Row className=\"mx-0 my-0 d-flex\">\r\n                                {\r\n                                props.wizardIntents \r\n                                &&\r\n                                props.wizardIntents.map((intent,index) => (\r\n                                    <div \r\n                                        key={index}\r\n                                        onClick={() => newIntent(intent)} \r\n                                        className={checkIntent(intent) ? \"d-flex wizard-config-intent-box-active py-1 px-2 mb-2 mr-1\" : \"d-flex wizard-config-intent-box py-1 px-2 mb-2 mr-1\"}\r\n                                    >\r\n                                        {\r\n                                        lang === \"en\"\r\n                                        ?\r\n                                        <p className=\"m-auto wizard-config-intent-name\">{intent}</p>\r\n                                        :\r\n                                        <p className=\"m-auto wizard-config-intent-name\">{intent[`_${lang}`]}</p>\r\n                                        }\r\n                                    </div>\r\n                                ))}\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row className=\"d-flex mt-1\">  \r\n                    {selectedIntents &&\r\n                        selectedIntents.map((intent,index) => \r\n                        <WizardIntentDetails \r\n                            indexOfIntent={index} \r\n                            intent={intent} \r\n                            wizardIdProject={props.wizardIdProject} \r\n                            setIntents={setSelectedIntents} \r\n                            selectedIntents={selectedIntents} \r\n                            isExistingProject={props.wizardExistingProjectIntents ? props.wizardExistingProjectIntents : false} \r\n                            intentStatus={intent.status}\r\n                        />\r\n                    )}\r\n                </Row>\r\n             \r\n                {/* BTNS */}\r\n                <Col lg={12}>\r\n                    <Row className=\"mb-3\">\r\n                        <Col lg={6} className=\"d-flex\">\r\n                            <div className=\"wizard-pages-inactive-btn py-2 px-4 my-auto text-center\"  onClick={handleBackFromStep3To2}>\r\n                                {/* MUST RESET ALL WIZARD 3 VARS */}\r\n                                {trans[lang].wizardConfig.back}\r\n                            </div>\r\n                        </Col>\r\n\r\n                        <Col lg={6}>\r\n                            <Row className=\"d-flex\">\r\n                                <div className={\"wizard-pages-inactive-btn ml-auto py-2 px-4 mr-3\"}>{trans[lang].wizardConfig.saveDraft}</div>\r\n                                \r\n                                <div className={\"wizard-pages-active-btn py-2 px-4 mr-3\"} onClick={() => goToTrainAgent()}>\r\n                                {\r\n                                    btnLoading\r\n                                    ?\r\n                                    (<Spinner size=\"sm\" animation=\"border\" variant=\"light\" />)\r\n                                    :\r\n                                    trans[lang].wizardConfig.next\r\n                                }\r\n                                </div>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n            </Col>\r\n    \r\n            <Col lg={2} />\r\n        </Row>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.socialMediaR.lang,\r\n    wizardStep: state.wizardR.wizardStep,\r\n    wizardIntentType: state.wizardR.wizardIntentType,\r\n    wizardIdProject: state.wizardR.wizardIdProject,\r\n    wizardExistingProject: state.wizardR.wizardExistingProject,\r\n    wizardExistingProjectIntents: state.wizardR.wizardExistingProjectIntents,\r\n    wizardIntents: state.wizardR.wizardIntents,\r\n    wizardSelectedPage: state.wizardR.wizardSelectedPage,\r\n    wizardSelectedPost: state.wizardR.wizardSelectedPost,\r\n})\r\n\r\nexport default connect(mapStateToProps, {nextWizardStep,getExistingProject, getAllIntents, trainAgentPage,trainAgentPost, resetStep3Wizard, nextSpecificWizardStep, resetWizardPostSelected,resetWizardPageSelected })(WizardConfig)\r\n"]},"metadata":{},"sourceType":"module"}